/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/UIKit.framework/UIKit
 */

#import "UIActionSheetDelegate.h"
#import "UIWebTiledView.h"
#import "UIAutoscrollContainer.h"
#import "UIKit-Structs.h"
#import "UIKeyboardInput.h"
#import "UIModalViewDelegate.h"
#import "UILongPressGestureRecognizerDelegate.h"
#import "UITextSelectingContent.h"
#import "UIWebDocumentView.h"

@class UILongPressGestureRecognizer, UITapGestureRecognizer, UIAutoscroll, UIActionSheet, NSTimer, UIPanGestureRecognizer, DOMHTMLElement, UIWindow, UIWebSelectionAssistant, WebView, CALayer, DOMNode, UITextInputTraits, UITextChecker, UIInformalDelegate, UITextInteractionAssistant, UITextSelectionView, UIColor, UITextPosition, NSDictionary, WebViewReachabilityObserver, UITextRange, WebThreadSafeUndoManager;
@protocol UITextInputDelegate;

@interface UIWebDocumentView : UIWebTiledView <UIKeyboardInput, UIModalViewDelegate, UILongPressGestureRecognizerDelegate> {
	int _retainCount;
	WKWindow* _wkWindow;
	WebView* _webView;
	WebViewReachabilityObserver* _reachabilityObserver;
	id m_parentTextView;
	id _delegate;
	id _textSuggestionDelegate;
	id _editingDelegate;
	CGRect _doubleTapRect;
	CGRect _mainDocumentDoubleTapRect;
	CGPoint _scrollPoint;
	CGPoint _doubleTapStartPosition;
	double _doubleTapStartTime;
	CGSize _pendingSize;
	int _orientation;
	DOMHTMLElement* _standaloneEditingElement;
	CGPoint _mouseDownPoint;
	double _mouseDownTime;
	UIAutoscroll* _autoscroll;
	CFDictionaryRef _plugInViews;
	int m_selectionGranularity;
	CALayer* _contentLayersHostingLayer;
	UITextInputTraits* _traits;
	id<UITextInputDelegate> _inputDelegate;
	UITapGestureRecognizer* _singleTapGestureRecognizer;
	UITapGestureRecognizer* _doubleTapGestureRecognizer;
	UITapGestureRecognizer* _twoFingerDoubleTapGestureRecognizer;
	UILongPressGestureRecognizer* _highlightLongPressGestureRecognizer;
	UILongPressGestureRecognizer* _longPressGestureRecognizer;
	UIPanGestureRecognizer* _twoFingerPanGestureRecognizer;
	struct {
		NSTimer* timer;
		CGPoint location;
		BOOL isBlocked;
		BOOL isCancelled;
		BOOL isOnWebThread;
		BOOL isDisplayingHighlight;
		BOOL attemptedClick;
		CGPoint lastPanTranslation;
		DOMNode* element;
		BOOL defersCallbacksState;
		UIInformalDelegate* delegate;
		UIWindow* windowForReenablingRotation;
		int interactionSheetType;
		UIActionSheet* interactionSheet;
		BOOL allowsImageSheet;
		BOOL allowsDataDetectorsSheet;
		BOOL allowsLinkSheet;
	} _interaction;
	struct {
		CGSize size;
		float initialScale;
		float minimumScale;
		float maximumScale;
		BOOL allowsUserScaling;
	} _viewportConfigurations[6];
	CGSize _minimumSize;
	int _documentType;
	float _documentScale;
	CGRect _documentBounds;
	int _enabledGestures;
	unsigned _customConfigurations;
	unsigned _mouseDownCount;
	unsigned _dataDetectorTypes;
	unsigned _webCoreNeedsSetNeedsDisplay : 1;
	unsigned _webCoreNeedsDraw : 1;
	unsigned _ignoresFocusingMouse : 1;
	unsigned _ignoresKeyEvents : 1;
	unsigned _autoresizes : 1;
	unsigned _updatingSize : 1;
	unsigned _scalesToFit : 1;
	unsigned _updatesScrollView : 1;
	unsigned _hasCustomScale : 1;
	unsigned _userScrolled : 1;
	unsigned _pageNeedsReset : 1;
	unsigned _hasScrollPoint : 1;
	unsigned _setNeedsDisplayWasForced : 1;
	unsigned _gesturesDisabled : 1;
	unsigned _doubleTapRectIsReplaced : 1;
	unsigned _standaloneEditableView : 1;
	unsigned _widgetEditingView : 1;
	unsigned _mouseDragged : 1;
	unsigned _mouseReentrancyGuard : 1;
	unsigned _isShowingFullScreenPlugIn : 1;
	unsigned _isSettingRedrawFrame : 1;
	unsigned _needsScrollNotifications : 1;
	unsigned _loadsSynchronously : 1;
	unsigned _mouseDown : 1;
	unsigned _usePreTimberlineTransparencyBehavior : 1;
	unsigned _geolocationDialogAllowed : 1;
	unsigned _usingMinimalTilesDuringLoading : 1;
	unsigned _sheetsCount : 2;
	unsigned _didFirstVisuallyNonEmptyLayout : 1;
	unsigned _loadInProgress : 1;
	unsigned _uiwdvIsResigningFirstResponder : 1;
	unsigned _classicViewportMode : 1;
	unsigned _sizeUpdatesSuspended : 1;
	unsigned _sizeUpdateOccurredWhileSuspended : 1;
	unsigned _shouldOnlyRecognizeGesturesOnActiveElements : 1;
	unsigned _shouldIgnoreCustomViewport : 1;
	unsigned _ignoresFocusEventFromFirstResponderChange : 1;
	unsigned _shoudCloseWebViewAtDealloc : 1;
	unsigned _hasDrawnTiles : 1;
	WebThreadSafeUndoManager* _undoManager;
	UIWebSelectionAssistant* _webSelectionAssistant;
	UITextInteractionAssistant* _textSelectionAssistant;
	UITextSelectionView* _textSelectionView;
	UITextChecker* _textChecker;
	UIEdgeInsets _caretInsets;
}
@property(assign, nonatomic) int autocapitalizationType;
@property(assign, nonatomic) int autocorrectionType;
@property(assign, nonatomic) int keyboardType;
@property(assign, nonatomic) int keyboardAppearance;
@property(assign, nonatomic) int returnKeyType;
@property(assign, nonatomic) BOOL enablesReturnKeyAutomatically;
@property(assign, nonatomic, getter=isSecureTextEntry) BOOL secureTextEntry;
@property(assign, nonatomic) CFCharacterSetRef textTrimmingSet;
@property(retain, nonatomic) UIColor* insertionPointColor;
@property(assign, nonatomic) unsigned insertionPointWidth;
@property(assign, nonatomic) int textLoupeVisibility;
@property(assign, nonatomic) int textSelectionBehavior;
@property(assign, nonatomic) id textSuggestionDelegate;
@property(assign, nonatomic) BOOL contentsIsSingleValue;
@property(assign, nonatomic) BOOL acceptsEmoji;
@property(readonly, assign, nonatomic) UITextSelectionView* selectionView;
@property(readonly, assign, nonatomic) UITextInteractionAssistant* interactionAssistant;
@property(readonly, assign, nonatomic) UIView<UITextSelectingContent>* content;
@property(readonly, assign, nonatomic, getter=isEditable) BOOL editable;
@property(readonly, assign, nonatomic, getter=isEditing) BOOL editing;
@property(assign, nonatomic) int emptyContentReturnKeyType;
@property(assign, nonatomic) BOOL returnKeyGoesToNextResponder;
@property(assign, nonatomic) BOOL acceptsFloatingKeyboard;
@property(assign, nonatomic) BOOL acceptsSplitKeyboard;
@property(assign, nonatomic) BOOL plainText;
@property(copy) UITextRange* selectedTextRange;
@property(readonly, assign, nonatomic) UITextRange* markedTextRange;
@property(copy, nonatomic) NSDictionary* markedTextStyle;
@property(readonly, assign, nonatomic) UITextPosition* beginningOfDocument;
@property(readonly, assign, nonatomic) UITextPosition* endOfDocument;
@property(assign, nonatomic) id<UITextInputDelegate> inputDelegate;
@property(readonly, assign, nonatomic) id<UITextInputTokenizer> tokenizer;
@property(readonly, assign, nonatomic) UIView* textInputView;
@property(assign, nonatomic) int selectionAffinity;
@property(assign, nonatomic) BOOL sizeUpdatesSuspended;
@property(assign, nonatomic) BOOL shouldOnlyRecognizeGesturesOnActiveElements;
@property(assign, nonatomic) BOOL shouldIgnoreCustomViewport;
@property(assign, nonatomic, getter=isDoubleTapEnabled) BOOL doubleTapEnabled;
+(Class)layerClass;
+(double)getTimestamp;
+(id)standardTextViewPreferences;
-(void)_restoreViewportSettingsWithSize:(CGSize)size;
-(CGRect)webViewFrameForUIFrame:(CGRect)uiframe;
-(id)initSimpleHTMLDocumentWithStyle:(id)style editable:(BOOL)editable withFrame:(CGRect)frame withPreferences:(id)preferences;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithWebView:(id)webView frame:(CGRect)frame;
-(void)enableReachability;
-(void)dealloc;
-(id)retain;
-(void)release;
-(BOOL)didFirstVisuallyNonEmptyLayout;
-(BOOL)hasDrawnTiles;
-(unsigned)retainCount;
-(void)_reachabilityManagerNotifiedIsReachable:(BOOL)reachable;
-(void)willMoveToSuperview:(id)superview;
-(void)didMoveToSuperview;
-(void)setUsesUIScrollView;
-(void)stopLoading:(id)loading;
-(void)setDelegate:(id)delegate;
-(void)loadRequest:(id)request;
-(void)loadHTMLString:(id)string baseURL:(id)url;
-(void)loadData:(id)data MIMEType:(id)type textEncodingName:(id)name baseURL:(id)url;
-(void)setLoadsSynchronously:(BOOL)synchronously;
-(BOOL)loadsSynchronously;
-(id)webView;
-(id)_groupName;
-(id)_focusedOrMainFrame;
-(void)setUserStyleSheet:(id)sheet;
-(void)setDetectsPhoneNumbers:(BOOL)numbers;
-(BOOL)detectsPhoneNumbers;
-(BOOL)_dataDetectionIsActivated;
-(unsigned)effectiveDataDetectorTypes;
-(void)setDataDetectorTypes:(unsigned)types;
-(unsigned)dataDetectorTypes;
-(void)setUsePreTimberlineTransparencyBehavior;
-(void)setFrame:(CGRect)frame;
-(float)integralScaleForScale:(float)scale;
-(void)_setDocumentScale:(float)scale;
-(float)_documentScale;
-(float)viewportWidth;
-(float)viewportHeight;
-(float)minimumScaleForMinimumSize:(CGSize)minimumSize;
-(float)initialScale;
-(float)maximumScale;
-(float)minimumScale;
-(void)_updateScrollViewBoundaryZoomScales;
-(void)viewportConfigurationsDidChange:(unsigned)viewportConfigurations;
-(CGPoint)convertPoint:(CGPoint)point toFrame:(id)frame;
-(CGPoint)convertPoint:(CGPoint)point fromFrame:(id)frame;
-(CGRect)convertRect:(CGRect)rect toFrame:(id)frame;
-(CGRect)convertRect:(CGRect)rect fromFrame:(id)frame;
-(void)_setDocumentType:(int)type overrideCustomConfigurations:(BOOL)configurations;
-(void)_setDocumentType:(int)type;
-(void)_updateSize;
-(void)_clearDoubleTapRect;
-(void)webView:(id)view didReceiveViewportArguments:(id)arguments forFrame:(id)frame;
-(BOOL)isClassicViewportMode;
-(void)webView:(id)view needsScrollNotifications:(id)notifications forFrame:(id)frame;
-(BOOL)needsScrollNotifications;
-(void)enclosingScrollerDidScroll;
-(void)resetTilingAfterLoadComplete;
-(void)webView:(id)view didFinishLoadForFrame:(id)frame;
-(void)webViewDidLayout:(id)webView;
-(void)webView:(id)view didFirstVisuallyNonEmptyLayoutInFrame:(id)frame;
-(void)webView:(id)view didFailLoadWithError:(id)error forFrame:(id)frame;
-(void)webView:(id)view didCommitLoadForFrame:(id)frame;
-(void)webView:(id)view didReceiveDocTypeForFrame:(id)frame;
-(void)_WAKViewSizeDidChange:(id)_WAKViewSize;
-(void)setEnabledGestures:(int)gestures;
-(int)enabledGestures;
-(CGRect)documentBounds;
-(void)setAutoresizes:(BOOL)autoresizes;
-(void)setMinimumSize:(CGSize)size;
-(void)setViewportSize:(CGSize)size forDocumentTypes:(int)documentTypes;
-(void)setInitialScale:(float)scale forDocumentTypes:(int)documentTypes;
-(void)setMinimumScale:(float)scale forDocumentTypes:(int)documentTypes;
-(void)setMaximumScale:(float)scale forDocumentTypes:(int)documentTypes;
-(void)setAllowsUserScaling:(BOOL)scaling forDocumentTypes:(int)documentTypes;
-(void)setUpdatesScrollView:(BOOL)view;
-(BOOL)updatesScrollView;
-(void)_restoreScrollPointForce:(BOOL)force;
-(void)_resetForNewPage;
-(void)_saveStateToHistoryItem:(id)historyItem;
-(void)saveStateToCurrentHistoryItem;
-(void)webView:(id)view saveStateToHistoryItem:(id)historyItem forFrame:(id)frame;
-(void)webView:(id)view restoreStateFromHistoryItem:(id)historyItem forFrame:(id)frame force:(BOOL)force;
-(BOOL)webView:(id)view shouldScrollToPoint:(CGPoint)point forFrame:(id)frame;
-(void)forceLayout;
-(void)layoutSubviews;
-(void)setNeedsDisplayInRect:(CGRect)rect;
-(void)setNeedsDisplay;
-(void)setSmoothsFonts:(BOOL)fonts;
-(void)setDrawsBackground:(BOOL)background;
-(void)setOpaque:(BOOL)opaque;
-(CGImageRef)createSnapshotWithRect:(CGRect)rect;
-(CGImageRef)newSnapshotWithRect:(CGRect)rect;
-(BOOL)cancelMouseTracking;
-(BOOL)cancelTouchTracking;
-(void)setIgnoresFocusingMouse:(BOOL)mouse;
-(void)setIgnoresKeyEvents:(BOOL)events;
-(void)setTilingArea:(int)area;
-(void)_didScroll;
-(BOOL)_isSubviewOfPlugInView:(id)view;
-(void)_notifyPlugInViewsOfWillBeginZooming;
-(void)_notifyPlugInViewsOfDidZoom;
-(void)_notifyPlugInViewsOfScaleChange;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(void)_didMoveFromWindow:(id)window toWindow:(id)window2;
-(void)_notifyContentHostingLayersOfScaleChange;
-(void)revealedSelectionByScrollingWebFrame:(id)frame;
-(void)webView:(id)view attachRootLayer:(id)layer;
-(void)webViewDidDrawTiles:(id)webView;
-(id)checkSpellingOfString:(id)string;
-(void)zoomToScale:(float)scale;
-(void)_reshapePlugInViews;
-(void)redrawScaledDocument;
-(void)sendOrientationEventForOrientation:(int)orientation;
-(float)_doubleTapScaleForSize:(float)size isWidth:(BOOL)width isPDF:(BOOL)pdf;
-(void)_handleDoubleTapAtPoint:(CGPoint)point inWebHTMLView:(id)webHTMLView outRenderRect:(CGRect*)rect;
-(void)_handleDoubleTapAtPoint:(CGPoint)point inWebPDFView:(id)webPDFView outRenderRect:(CGRect*)rect;
-(void)_handleDoubleTapAtLocation:(CGPoint)location;
-(void)_handleTwoFingerDoubleTapAtLocation:(CGPoint)location;
-(CGRect)doubleTapRect;
-(BOOL)doubleTapRectIsReplaced;
-(void)assistFormNode:(id)node;
-(void)_resetFormDataForFrame:(id)frame;
-(void)_clearAllConsoleMessages;
-(void)_setPDFView:(id)view;
-(void)_updatePDFPageNumberLabelWithUserScrolling:(BOOL)userScrolling animated:(BOOL)animated;
-(void)_cleanUpPDF;
-(id)_requestWithUDIDHeaderIfAppropriate:(id)udidheaderIfAppropriate;
-(id)formElement;
-(id)textFormElement;
-(void)setIsStandaloneEditableView:(BOOL)view;
-(BOOL)isStandaloneEditableView;
-(void)setStandaloneEditingElement:(id)element;
-(id)standaloneEditingElement;
-(void)setIsWidgetEditingView:(BOOL)view;
-(BOOL)isWidgetEditingView;
-(BOOL)updateKeyboardStateOnResponderChanges;
-(BOOL)canBecomeFirstResponder;
-(BOOL)canResignFirstResponder;
-(BOOL)becomeFirstResponder;
-(void)deferredBecomeFirstResponder;
-(BOOL)resignFirstResponder;
-(id)_responderForBecomeFirstResponder;
-(BOOL)makeWKFirstResponder;
-(BOOL)clearWKFirstResponder;
-(void)ensureSelection;
-(void)setInteractionAssistantGestureRecognizers;
-(void)_undoManagerDidUndo:(id)_undoManager;
-(void)_undoManagerDidRedo:(id)_undoManager;
-(id)undoManagerForWebView:(id)webView;
-(id)undoManager;
-(id)_parentTextView;
-(void)_setParentTextView:(id)view;
-(BOOL)_editable;
-(void)_setEditable:(BOOL)editable;
-(void)setContinuousSpellCheckingEnabled:(BOOL)enabled;
-(id)delegate;
-(void)addInputString:(id)string;
-(void)deleteFromInput;
-(void)deleteBackward;
-(void)insertText:(id)text;
-(void)replaceRangeWithTextWithoutClosingTyping:(id)textWithoutClosingTyping replacementText:(id)text;
-(void)replaceRangeWithText:(NSRange)text replacementText:(id)text2;
-(void)replaceCurrentWordWithText:(id)text;
-(void)setMarkedText:(id)text;
-(void)setMarkedText:(id)text selectedRange:(NSRange)range;
-(void)confirmMarkedText:(id)text;
-(id)markedText;
-(unsigned short)characterInRelationToCaretSelection:(int)caretSelection;
-(unsigned short)characterBeforeCaretSelection;
-(unsigned short)characterAfterCaretSelection;
-(id)fontForCaretSelection;
-(id)textColorForCaretSelection;
-(CGRect)rectForNSRange:(NSRange)nsrange;
-(id)rectsForNSRange:(NSRange)nsrange;
-(CGRect)rectContainingCaretSelection;
-(id)wordRangeContainingCaretSelection;
-(BOOL)shouldEnableAutoShift;
-(id)wordContainingCaretSelection;
-(id)wordInRange:(id)range;
-(void)expandSelectionToStartOfWordContainingCaretSelection;
-(int)wordOffsetInRange:(id)range;
-(void)replaceSelectionWithWebArchive:(id)webArchive selectReplacement:(BOOL)replacement smartReplace:(BOOL)replace;
-(NSRange)_markedTextNSRange;
-(NSRange)selectionRange;
-(id)selectedDOMRange;
-(void)setSelectedDOMRange:(id)range affinityDownstream:(BOOL)downstream;
-(id)rangeByMovingCurrentSelection:(int)selection;
-(id)rangeByExtendingCurrentSelection:(int)selection;
-(void)extendCurrentSelection:(int)selection;
-(BOOL)hasSelection;
-(BOOL)hasSelectionInPlainTextRegion;
-(BOOL)selectionAtDocumentStart;
-(BOOL)selectionAtWordStart;
-(void)moveBackward:(unsigned)backward;
-(void)moveForward:(unsigned)forward;
-(void)selectAll;
-(void)setText:(id)text;
-(id)text;
-(BOOL)hasContent;
-(void)setCaretChangeListener:(id)listener;
-(CGRect)convertCaretRect:(CGRect)rect;
-(id)implementationWebView;
-(BOOL)keyboardInput:(id)input shouldReplaceTextInRange:(NSRange)range replacementText:(id)text;
-(BOOL)keyboardInput:(id)input shouldInsertText:(id)text isMarkedText:(BOOL)text3;
-(BOOL)keyboardInputShouldDelete:(id)keyboardInput;
-(BOOL)keyboardInputChanged:(id)changed;
-(void)keyboardInputChangedSelection:(id)selection;
-(id)automaticallySelectedOverlay;
-(void)setBottomBufferHeight:(float)height;
-(BOOL)requiresKeyEvents;
-(void)handleKeyWebEvent:(id)event;
-(void)setPaused:(BOOL)paused;
-(void)setPaused:(BOOL)paused withEvents:(BOOL)events;
-(id)webView:(id)view plugInViewWithArguments:(id)arguments fromPlugInPackage:(id)package;
-(void)webView:(id)view willShowFullScreenForPlugInView:(id)view2;
-(void)webView:(id)view didHideFullScreenForPlugInView:(id)view2;
-(void)didRemovePlugInView:(id)view;
-(BOOL)isShowingFullScreenPlugInUI;
-(BOOL)hasPlugInSubviews;
-(void)webView:(id)view willAddPlugInView:(id)view2;
-(id)textInputTraits;
-(void)forwardInvocation:(id)invocation;
-(id)methodSignatureForSelector:(SEL)selector;
-(void)takeTraitsFrom:(id)from;
-(void)beginSelectionChange;
-(void)endSelectionChange;
-(void)updateSelection;
-(CGRect)selectionClipRect;
-(void)cut:(id)cut;
-(void)copy:(id)copy;
-(id)_supportedPasteboardTypesForCurrentSelection;
-(id)_documentFragmentForPasteboardItemAtIndex:(int)index;
-(void)paste:(id)paste;
-(void)select:(id)select;
-(void)selectAll:(id)all;
-(void)replace:(id)replace;
-(void)promptForReplace:(id)replace;
-(void)_setRtoLTextDirection:(id)direction;
-(void)_setLtoRTextDirection:(id)direction;
-(id)webSelectionAssistant;
-(BOOL)isCaretInEmptyParagraph;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(CGRect)visibleFrame;
-(CGRect)visibleContentFrame;
-(CGRect)autoscrollDragFrame;
-(CGRect)autoscrollContentFrame;
-(BOOL)playsNicelyWithGestures;
-(BOOL)becomesEditableWithGestures;
-(void)setBecomesEditableWithGestures:(BOOL)gestures;
-(void)useSelectionAssistantWithMode:(int)mode;
-(void)willStartScroll;
-(void)didEndScroll;
-(void)willStartZoom;
-(void)didZoom;
-(void)didEndZoom;
-(BOOL)containsOnlySelectableElements;
-(BOOL)hasSimpleTextOnlyStructure;
-(void)detachSelectionView;
-(void)detachInteractionAssistant;
-(int)selectionState;
-(id)_textSelectingContainer;
-(BOOL)hasText;
-(void)setSelectedTextRange:(id)range withAffinityDownstream:(BOOL)affinityDownstream;
-(void)unmarkText;
-(id)textInRange:(id)range;
-(id)textRangeFromPosition:(id)position toPosition:(id)position2;
-(id)rangeOfEnclosingWord:(id)enclosingWord;
-(void)replaceRange:(id)range withText:(id)text;
-(int)comparePosition:(id)position toPosition:(id)position2;
-(int)offsetFromPosition:(id)position toPosition:(id)position2;
-(id)positionFromPosition:(id)position offset:(int)offset;
-(id)_positionFromPosition:(id)position inDirection:(int)direction offset:(int)offset withAffinityDownstream:(BOOL)affinityDownstream;
-(id)positionFromPosition:(id)position inDirection:(int)direction offset:(int)offset;
-(BOOL)isPosition:(id)position atBoundary:(int)boundary inDirection:(int)direction;
-(id)positionFromPosition:(id)position toBoundary:(int)boundary inDirection:(int)direction;
-(BOOL)isPosition:(id)position withinTextUnit:(int)unit inDirection:(int)direction;
-(void)_scrollRectToVisible:(CGRect)visible animated:(BOOL)animated;
-(id)rangeEnclosingPosition:(id)position withGranularity:(int)granularity inDirection:(int)direction;
-(CGRect)firstRectForRange:(id)range;
-(CGRect)_lastRectForRange:(id)range;
-(CGRect)caretRectForPosition:(id)position;
-(id)closestPositionToPoint:(CGPoint)point;
-(id)closestPositionToPoint:(CGPoint)point withinRange:(id)range;
-(id)characterRangeAtPoint:(CGPoint)point;
-(id)positionWithinRange:(id)range farthestInDirection:(int)direction;
-(id)characterRangeByExtendingPosition:(id)position inDirection:(int)direction;
-(int)baseWritingDirectionForPosition:(id)position inDirection:(int)direction;
-(void)setBaseWritingDirection:(int)direction forRange:(id)range;
@end

@interface UIWebDocumentView (SyntheticEvents)
-(id)_scriptingInfoForLink:(id)link;
-(id)_scriptingInfoForForm:(id)form;
-(id)scriptingInfoWithChildren;
@end

@interface UIWebDocumentView (InteractionPrivate)
-(BOOL)canOpenNewPageForURL:(id)url;
-(void)_showImageSheet;
-(void)_showLinkSheet;
-(void)_showDataDetectorsSheet;
@end

@interface UIWebDocumentView (Interaction) <UIActionSheetDelegate>
+(id)_createDefaultHighlightView;
+(id)_highlightView;
-(void)clearInteractionTimer;
-(void)performInteractionSelector:(SEL)selector afterDelay:(double)delay;
-(void)_resetInteractionWithLocation:(CGPoint)location;
-(void)startInteractionWithLocation:(CGPoint)location;
-(void)continueInteractionWithLocation:(CGPoint)location;
-(void)tapInteractionWithLocation:(CGPoint)location;
-(void)validateInteractionWithLocation:(CGPoint)location;
-(BOOL)startActionSheet;
-(BOOL)isInInteraction;
-(BOOL)willInteractWithLocation:(CGPoint)location;
-(void)installGestureRecognizers;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizer:(id)recognizer canPreventGestureRecognizer:(id)recognizer2;
-(BOOL)gestureRecognizer:(id)recognizer canBePreventedByGestureRecognizer:(id)recognizer2;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)_singleTapRecognized:(id)recognized;
-(void)_doubleTapRecognized:(id)recognized;
-(void)_twoFingerDoubleTapRecognized:(id)recognized;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)_highlightLongPressRecognized:(id)recognized;
-(void)_longPressRecognized:(id)recognized;
-(void)_twoFingerPanRecognized:(id)recognized;
-(void)performClick:(id)click;
-(void)_sendMouseMoveAndAttemptClick:(id)click;
-(void)attemptClick:(id)click;
-(void)webView:(id)view didObserveDeferredContentChange:(int)change forFrame:(id)frame;
-(void)webViewDidPreventDefaultForEvent:(id)webView;
-(id)approximateNodeAtViewportLocation:(CGPoint*)viewportLocation;
-(void)highlightApproximateNodeInverted:(BOOL)inverted;
-(void)hideTapHighlight;
-(void)highlightApproximateNodeAndDisplayInfoSheet;
-(void)resetInteraction;
-(void)completeInteraction;
-(void)cancelInteraction;
-(void)deferInteraction;
-(void)cancelInteractionWithImmediateDisplay:(BOOL)immediateDisplay;
-(void)image:(id)image didFinishSavingWithError:(id)error contextInfo:(id)info;
-(void)_saveImages:(id)images;
-(void)_copyImage:(id)image;
-(void)_copyElement:(id)element;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)sendScrollWheelEvents;
-(BOOL)supportsTwoFingerScrollingAtTouchLocation:(CGPoint)touchLocation andLocation:(CGPoint)location;
-(void)setInteractionDelegate:(id)delegate;
-(id)interactionDelegate;
-(void)setAllowsImageSheet:(BOOL)sheet;
-(void)setAllowsDataDetectorsSheet:(BOOL)sheet;
-(void)setAllowsLinkSheet:(BOOL)sheet;
-(id)superviewForSheet;
-(void)_disableWindowRotation;
-(void)_enableWindowRotation;
-(void)_disableWebView;
-(void)_enableWebView;
-(id)_doubleTapGestureRecognizer;
-(void)showBrowserSheet:(id)sheet shouldShowFromPoint:(BOOL)point point:(CGPoint)point3 arrowDirections:(unsigned)directions;
-(void)showBrowserSheet:(id)sheet shouldShowFromPoint:(BOOL)point point:(CGPoint)point3;
-(void)showAlert:(id)alert;
-(void)showBrowserSheet:(id)sheet;
-(void)showBrowserSheet:(id)sheet atPoint:(CGPoint)point;
-(void)hideBrowserSheet;
-(void)hideAlert;
-(void)actionWillStart;
-(void)actionDidFinish;
@end

@interface UIWebDocumentView (Printing)
-(BOOL)isInPrintMode;
-(id)_beginPrintModeForHTMLWithSize:(CGSize)size startOffset:(float)offset minimumLayoutWidth:(float)width maximumLayoutWidth:(float)width4 tileClippedContent:(BOOL)content;
-(id)_beginPrintModeForPDFWithSize:(CGSize)size startOffset:(float)offset minimumLayoutWidth:(float)width maximumLayoutWidth:(float)width4;
-(id)beginPrintModeWithWidth:(float)width height:(float)height startOffset:(float)offset shrinkToFit:(BOOL)fit;
-(id)beginPrintModeWithWidth:(float)width height:(float)height startOffset:(float)offset shrinkToFit:(BOOL)fit tileClippedContent:(BOOL)content;
-(id)beginPrintModeWithSize:(CGSize)size startOffset:(float)offset minimumLayoutWidth:(float)width maximumLayoutWidth:(float)width4 tileClippedContent:(BOOL)content;
-(void)endPrintMode;
-(void)_drawPDFPagesForPage:(unsigned)page withPaginationInfo:(id)paginationInfo;
-(void)drawPage:(unsigned)page withPaginationInfo:(id)paginationInfo;
@end

@interface UIWebDocumentView (Selecting)
-(BOOL)mouseEventsChangeSelection;
-(CGRect)visibleRectForSelecting;
-(CGPoint)constrainedPoint:(CGPoint)point;
@end

@interface UIWebDocumentView (UIWebDocumentViewTextSelecting) <UITextSelectingContent, UIAutoscrollContainer>
@property(assign, nonatomic) CGPoint autoscrollContentOffset;
@property(assign, nonatomic) int selectionGranularity;
@property(readonly, assign, nonatomic) UIResponder<UITextInput>* asText;
@property(readonly, assign, nonatomic) int selectionState;
-(void)selectWord;
-(CGRect)convertRectFromSelectedFrameCoordinates:(CGRect)selectedFrameCoordinates;
-(CGPoint)convertPointToSelectedFrameCoordinates:(CGPoint)selectedFrameCoordinates;
-(void)selectionChanged;
-(void)selectionChanged:(id)changed;
-(void)clearSelection;
-(BOOL)hasSelection;
-(BOOL)hasEditableSelection;
-(BOOL)hasMarkedText;
-(CGRect)closestCaretRectInMarkedTextRangeForPoint:(CGPoint)point;
-(unsigned)offsetInMarkedTextForSelection:(id)selection;
-(void)collapseSelection;
-(void)setCaretInsets:(UIEdgeInsets)insets;
-(UIEdgeInsets)caretInsets;
-(CGRect)caretRect;
-(CGRect)caretRectForVisiblePosition:(id)visiblePosition;
-(int)selectionBaseWritingDirection;
-(void)toggleBaseWritingDirection;
-(void)setBaseWritingDirection:(int)direction;
-(void)setRangedSelectionBaseToCurrentSelection;
-(void)setRangedSelectionBaseToCurrentSelectionStart;
-(void)setRangedSelectionBaseToCurrentSelectionEnd;
-(void)clearRangedSelectionInitialExtent;
-(void)setRangedSelectionInitialExtentToCurrentSelectionStart;
-(void)setRangedSelectionInitialExtentToCurrentSelectionEnd;
-(BOOL)setRangedSelectionExtentPoint:(CGPoint)point baseIsStart:(BOOL)start;
-(void)setRangedSelectionExtentPoint:(CGPoint)point baseIsStart:(BOOL)start allowFlipping:(BOOL)flipping;
-(void)setSelectionWithFirstPoint:(CGPoint)firstPoint secondPoint:(CGPoint)point;
-(id)wordAtPoint:(CGPoint)point;
-(id)selectedDOMRange;
-(void)setSelectedDOMRange:(id)range affinity:(int)affinity;
-(int)selectionAffinity;
-(id)textInDOMRange:(id)domrange;
-(id)selectionRectsForRange:(id)range;
-(id)selectionRects;
-(void)smartExtendRangedSelection:(int)selection;
-(void)setRangedSelectionWithExtentPoint:(CGPoint)extentPoint;
-(void)setSelectionToEnd;
-(void)setSelectionToStart;
-(void)selectAll;
-(BOOL)selectionIsCaretInDisplayBlockElementAtOffset:(int)offset;
-(CGRect)contentFrameForView:(id)view;
-(void)startAutoscroll:(CGPoint)autoscroll;
-(void)cancelAutoscroll;
-(void)scrollSelectionToVisible:(BOOL)visible;
-(void)setSelectionWithPoint:(CGPoint)point;
-(id)webVisiblePositionForPoint:(CGPoint)point;
-(CGRect)visibleBounds;
@end

@interface UIWebDocumentView (UIWebDocumentViewPrintFormatter)
-(Class)_printFormatterClass;
@end

