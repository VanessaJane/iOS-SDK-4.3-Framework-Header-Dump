/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

#import "MediaPlayer-Structs.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSMutableArray, MPQueueFeeder, NSURL, NSArray, NSString, NSData, MPAlternateTracks;

@interface MPAVItem : XXUnknownSuperclass {
	MPQueueFeeder* _feeder;
	NSMutableArray* _chapterTimeMarkers;
	NSMutableArray* _artworkTimeMarkers;
	NSMutableArray* _urlTimeMarkers;
	MPAlternateTracks* _alternateTracks;
	unsigned _type;
	double _cachedDuration;
	double _cachedPlayableDuration;
	float _defaultPlaybackRate;
	NSString* _videoID;
	unsigned _advancedDuringPlayback : 1;
	unsigned _handledFinishTime : 1;
	unsigned _hasPlayedThisSession : 1;
	unsigned _wasCountedAsSkipped : 1;
	unsigned _isStreamable : 2;
	unsigned _useCachedPlayableDuration : 1;
	unsigned _watchingAttributes : 1;
	unsigned _videoDisabled : 1;
	unsigned _lyricsAvailable : 1;
	unsigned _delayedInvalidateCachedPlayedDurationScheduled : 1;
}
@property(readonly, retain, nonatomic) MPAlternateTracks* alternateTracks;
@property(assign, nonatomic) MPQueueFeeder* feeder;
@property(assign, nonatomic) float defaultPlaybackRate;
@property(copy, nonatomic) NSString* videoID;
@property(readonly, assign, nonatomic) NSURL* protectedContentSupportStorageURL;
@property(readonly, assign, nonatomic) BOOL externalProtectionEnabled;
@property(readonly, assign, nonatomic) BOOL requiresExternalProtection;
@property(readonly, assign, nonatomic) double timeOfSeekableEnd;
@property(readonly, assign, nonatomic) double timeOfSeekableStart;
@property(readonly, assign, nonatomic) double playableDurationIfAvailable;
@property(readonly, assign, nonatomic) double playableDuration;
@property(readonly, assign, nonatomic) double durationFromExternalMetadata;
@property(readonly, assign, nonatomic) double durationIfAvailable;
@property(readonly, assign, nonatomic) BOOL durationIsValid;
@property(readonly, assign, nonatomic) BOOL wantsSubtitles;
@property(readonly, assign, nonatomic) float userRating;
@property(readonly, assign, nonatomic) unsigned long long persistentID;
@property(readonly, assign, nonatomic, getter=isStreamable) BOOL streamable;
@property(readonly, retain, nonatomic) NSURL* podcastURL;
@property(readonly, retain, nonatomic) NSString* mainTitle;
@property(readonly, assign, nonatomic) BOOL hasDataForItemArtwork;
@property(readonly, retain, nonatomic) NSString* lyrics;
@property(readonly, retain, nonatomic) NSString* genre;
@property(readonly, assign, nonatomic) unsigned discCount;
@property(readonly, assign, nonatomic) unsigned discNumber;
@property(readonly, retain, nonatomic) NSString* composer;
@property(readonly, retain, nonatomic) NSString* artworkMIMEType;
@property(readonly, retain, nonatomic) NSData* artworkImageData;
@property(readonly, assign, nonatomic) unsigned albumTrackCount;
@property(readonly, assign, nonatomic) unsigned albumTrackNumber;
@property(readonly, retain, nonatomic) NSString* albumArtist;
@property(readonly, retain, nonatomic) NSString* artist;
@property(readonly, retain, nonatomic) NSString* album;
@property(readonly, assign, nonatomic) BOOL hasDisplayableText;
@property(readonly, assign, nonatomic) BOOL displayableTextLoaded;
@property(readonly, retain, nonatomic) NSString* displayableText;
@property(readonly, assign, nonatomic) unsigned type;
@property(readonly, assign, nonatomic) BOOL useEmbeddedChapterData;
@property(readonly, retain, nonatomic) NSArray* urlTimeMarkers;
@property(readonly, retain, nonatomic) NSArray* artworkTimeMarkers;
@property(readonly, retain, nonatomic) NSArray* chapterTimeMarkers;
@property(assign, nonatomic, getter=isVideoDisabled) BOOL videoDisabled;
@property(readonly, assign, nonatomic) double currentTimeDisplayOverride;
@property(readonly, assign, nonatomic) unsigned indexInQueueFeeder;
@property(readonly, assign, nonatomic) unsigned countForQueueFeeder;
@property(assign, nonatomic) BOOL hasPlayedThisSession;
@property(assign, nonatomic) double playbackCheckpointCurrentTime;
+(unsigned)defaultScaleMode;
+(void)setDefaultScaleMode:(unsigned)mode;
-(BOOL)allowAutoChangingScaleModeToFill;
-(BOOL)isSupportedDefaultPlaybackSpeed:(unsigned)speed;
-(id)init;
-(id)initWithPath:(id)path error:(id*)error;
-(void)_releaseAllTimeMarkers;
-(void)dealloc;
-(void)flushNowPlayingCaches;
-(void)resetBookkeeping;
-(void)setAlternateAudioTrackID:(unsigned)anId;
-(void)setPlaybackStoppedTime:(double)time;
-(void)notePlaybackFinishedByHittingEnd;
-(void)setPlaybackFinishedTime:(double)time;
-(void)setRating:(float)rating;
-(void)setSubtitleTrackID:(unsigned)anId;
-(void)setUserAdvancedDuringPlayback:(BOOL)playback;
-(void)setUserEnabledSubtitles:(BOOL)subtitles;
-(void)setUserSkippedPlayback:(BOOL)playback;
-(BOOL)userSkippedPlayback;
-(double)avDuration;
-(double)duration;
-(id)formatDetailsForTracks;
-(void)setupPlaybackInfo;
-(void)updateAttributesForDefaultsChange:(id)defaultsChange;
-(void)postDurationDidChange;
-(BOOL)isPlaceholderForItem:(id)item;
-(BOOL)hasAlternatesForTypes:(unsigned)types;
-(unsigned)alternatesCountForTypes:(unsigned)types;
-(float)playbackRateForLevel:(unsigned)level direction:(int)direction paused:(BOOL)paused;
-(float)scanIntervalForLevel:(unsigned)level paused:(BOOL)paused;
-(void)setOverrideDuration:(double)duration;
-(void)_realoadEmbeddedTimeMarkers;
-(id)newTimeMarkerWithInfo:(id)info markerType:(int)type;
-(void)_checkAllowsBlockingDurationCall;
-(id)blockingAttributeForKey:(id)key;
-(id)_newBlockingLoadedTimeMarkersForMarkerType:(int)markerType;
-(id)imageCacheRequestWithSize:(CGSize)size time:(double)time;
-(id)titlesForTime:(double)time;
-(BOOL)useAsyncEmbeddedChapterDataLoading;
-(BOOL)useBlockingEmbeddedChapterDataLoading;
-(id*)_ivarAddrForMarkerType:(int)markerType;
-(void)_blockingloadTimeMarkersForMarkerType:(int)markerType;
-(id)_mutableTimeMarkersForMarkerType:(int)markerType;
-(BOOL)_insertEmbeddedTimeMarkerWithInfo:(id)info markerType:(int)type;
-(BOOL)insertEmbeddedTimeMarkerWithInfo:(id)info markerType:(int)type;
-(id)newURLTimeMarkersByFakingWithChapterMarkers:(id)chapterMarkers;
-(void)loadFakeURLTimeMarkersIfNecessary;
-(id)chapterTimeMarkerForTime:(double)time;
-(id)artworkTimeMarkerForTime:(double)time;
-(id)urlTimeMarkerForTime:(double)time;
-(id)localizedPositionInPlaylistString;
-(double)_durationFromExternalMetadataIfAvailable;
-(void)_delayedInvalidateCachedPlayedDuration;
-(void)_itemAttributeAvailableNotification:(id)notification;
-(void)_commonInit;
-(void)_updateForNaturalSizeChange;
-(id)blockForDirectAVControllerNotificationReferencingItem:(id)directAVControllerNotificationReferencingItem;
@end

