/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/MapKit.framework/MapKit
 */

#import "RadiosPreferencesDelegate.h"
#import "PBRequesterDelegate.h"
#import "CLLocationManagerDelegateInternal.h"
#import <XXUnknownSuperclass.h> // Unknown library
#import "MapKit-Structs.h"

@class NSString, MKLocationShiftFunction, CLLocationManager, NSHashTable, CLLocation, CLHeading, NSMutableArray, GMMLocationShiftRequester, NSTimer, RadiosPreferences, MKRouteStep, MKTripRecorder;

@interface MKLocationManager : XXUnknownSuperclass <CLLocationManagerDelegateInternal, PBRequesterDelegate, RadiosPreferencesDelegate> {
@private
	CLLocationManager* _clLocationManager;
	NSHashTable* _locationObservers;
	CLLocation* _lastLocation;
	CLHeading* _throttledHeading;
	CLHeading* _heading;
	id _headingObserver;
	double _lastLocationUpdateTime;
	BOOL _isLastLocationStale;
	BOOL _trackingLocation;
	BOOL _trackingHeading;
	BOOL _shouldThrottleHeading;
	NSString* _tripPath;
	NSMutableArray* _tripPaths;
	MKTripRecorder* _recorder;
	double _expectedTimeTillNextUpdate;
	double _calculatingLocationStartTime;
	double _userLocationCacheDuration;
	double _applicationResumeTime;
	double _applicationSuspendTime;
	double _GPSStartTime;
	double _headingUpdateTime;
	double _locationAccuracyUpdateTime;
	MKRouteStep* _routeStep;
	BOOL _usesRouteCorrection;
	BOOL _isLastLocationRouteCorrected;
	NSTimer* _delayedDeliveryTimer;
	NSTimer* _coalesceTimer;
	double _lastLocationReportTime;
	BOOL _chinaShiftEnabled;
	MKLocationShiftFunction* _shiftFunction;
	GMMLocationShiftRequester* _shiftFunctionRequester;
	RadiosPreferences* _radiosPreferences;
	BOOL _isWiFiEnabled;
	CTServerConnectionRef _telephonyServerConnection;
}
@property(readonly, assign, nonatomic) CLLocation* lastLocation;
@property(readonly, assign, nonatomic) CGPoint longLat;
@property(readonly, assign, nonatomic) double accuracy;
@property(assign, nonatomic) double expectedTimeTillNextUpdate;
@property(readonly, assign, nonatomic) BOOL isLastLocationStale;
@property(assign, nonatomic) double userLocationCacheDuration;
@property(retain, nonatomic) NSString* tripPath;
@property(retain, nonatomic) NSMutableArray* tripPaths;
@property(readonly, assign, nonatomic) BOOL isLastLocationRouteCorrected;
@property(retain, nonatomic) MKRouteStep* routeStep;
@property(assign, nonatomic) BOOL usesRouteCorrection;
@property(assign, nonatomic) BOOL shouldThrottleHeading;
@property(readonly, assign, nonatomic) CLHeading* heading;
@property(retain, nonatomic) CLHeading* throttledHeading;
@property(assign, nonatomic) id headingObserver;
@property(assign, nonatomic) BOOL chinaShiftEnabled;
@property(retain, nonatomic) MKLocationShiftFunction* shiftFunction;
@property(retain, nonatomic) GMMLocationShiftRequester* shiftFunctionRequester;
@property(readonly, assign, nonatomic) int lastLocationSource;
@property(readonly, assign, nonatomic) BOOL hasHiFiCapability;
@property(readonly, assign, nonatomic) BOOL hasLocation;
@property(assign, nonatomic) int headingOrientation;
@property(readonly, assign, nonatomic) double headingUpdateTimeInterval;
@property(readonly, assign, nonatomic) BOOL isAirplaneModeBlockingLocation;
@property(readonly, assign, nonatomic) BOOL isHeadingServicesAvailable;
@property(readonly, assign, nonatomic) BOOL isLocationServicesRestricted;
@property(readonly, assign, nonatomic) BOOL isLocationServicesDenied;
@property(readonly, assign, nonatomic) BOOL isLocationServicesApproved;
@property(readonly, assign, nonatomic) BOOL isLocationServicesEnabled;
@property(readonly, assign, nonatomic) BOOL isLocationServicesPossiblyAvailable;
@property(readonly, assign, nonatomic) BOOL isLocationServicesAvailable;
+(id)sharedLocationManager;
-(id)init;
-(id)_radiosPreferences;
-(void)airplaneModeChanged;
-(void)wiFiStatusChanged:(id)changed;
-(id)clLocationManager;
-(void)setClLocationManager:(id)manager;
-(void)setLastLocation:(id)location;
-(void)setHeading:(id)heading;
-(void)_setDelayedDeliveryTimer:(id)timer;
-(BOOL)_isTimeToResetOnResume;
-(void)applicationResumed:(id)resumed;
-(void)applicationSuspended:(id)suspended;
-(void)_reportLocationStatus:(SEL)status;
-(void)_reportLocationFailureWithError:(id)error;
-(void)_reportLocationSuccess;
-(void)_reportLocationReset;
-(void)_reportHeadingSuccess;
-(void)_reportHeadingFailureWithError:(id)error;
-(void)repostLastKnownLocation;
-(void)reset;
-(void)_setTrackingLocation:(BOOL)location;
-(void)startRecording;
-(void)stopRecording;
-(void)writeRecording;
-(void)writeRecordingToPath:(id)path;
-(void)loadRecording:(id)recording;
-(void)loadRecordings:(id)recordings;
-(void)unloadRecording;
-(BOOL)displayCoreLocationStats;
-(void)writeCoreLocationLog;
-(id)_routeCorrectedLocationForLocation:(id)location routeStep:(id*)step;
-(void)setCoalesceTimer:(id)timer;
-(BOOL)shouldCoalesceUpdates;
-(BOOL)shouldStartCoalescingLocation:(id)location;
-(BOOL)shouldStopCoalescingLocation:(id)location;
-(void)_startCoalescingUpdates:(int)updates;
-(void)_stopCoalescingUpdates;
-(void)reportCoalescedUpdated;
-(BOOL)isGPSWarmingUp;
-(void)dampenGPSLocationAccuracy:(id*)accuracy oldLocationSource:(int)source;
-(void)dismissHeadingCalibrationDisplay;
-(void)requester:(id)requester didReceiveResponse:(id)response forRequest:(id)request;
-(void)requesterDidFinish:(id)requester;
-(void)requester:(id)requester didFailWithError:(id)error;
-(void)requesterDidCancel:(id)requester;
-(void)requestShiftFunctionForLocation:(id)location wrap:(BOOL)wrap;
-(BOOL)_radioBoundToNonChinaMCC;
-(id)_applyChinaLocationShift:(id)shift;
-(void)locationManager:(id)manager didUpdateToLocation:(id)location fromLocation:(id)location3;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didUpdateHeading:(id)heading;
-(BOOL)locationManagerShouldDisplayHeadingCalibration:(id)locationManager;
-(void)locationManager:(id)manager didChangeAuthorizationStatus:(int)status;
-(void)tripPlayerDidEnd:(id)tripPlayer;
-(void)startLocationUpdateWithObserver:(id)observer;
-(void)stopLocationUpdateWithObserver:(id)observer;
-(void)_setTrackingHeading:(BOOL)heading;
-(void)startHeadingUpdateWithObserver:(id)observer;
-(void)stopHeadingUpdateWithObserver:(id)observer;
@end

