/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/MapKit.framework/MapKit
 */

#import "MapKit-Structs.h"
#import "MKLocatableObject.h"
#import "MKAnnotation.h"
#import "NSCopying.h"
#import "MKSearchResult.h"
#import "MKSearchResultRepr.h"

@class NSString, UIImage, MKAddressBookAddress, CLLocation;

@interface MKSearchResult : MKSearchResultRepr <NSCopying, MKLocatableObject, MKAnnotation> {
@private
	NSString* _singleLineAddress;
	NSString* _singleLineAddressWithHomeCountry;
	BOOL _hasMergedFormattedAddress;
	NSString* _resultIdentifier;
	CADoublePoint _coordinate;
	CLLocation* _location;
	BOOL _originatedFromHistory;
	MKAddressBookAddress* _address;
	UIImage* _adIcon;
	NSString* _routeDistanceSummary;
	MKSearchResult* _representedSearchResult;
}
@property(assign, nonatomic) CADoublePoint coordinate;
@property(assign, nonatomic) BOOL originatedFromHistory;
@property(readonly, assign, nonatomic) UIImage* adIcon;
@property(readonly, assign, nonatomic, getter=isUserCreated) BOOL userCreated;
@property(retain, nonatomic) NSString* author;
@property(readonly, assign, nonatomic) BOOL hasStructuredAddress;
@property(assign, nonatomic, getter=isReverseGeocoded) BOOL reverseGeocoded;
@property(retain, nonatomic) NSString* routeDistanceSummary;
@property(retain, nonatomic) MKSearchResult* representedSearchResult;
@property(retain, nonatomic) NSString* panoramaID;
@property(readonly, assign, nonatomic) BOOL requiresPanoramaIDCheck;
@property(readonly, assign, nonatomic) CLLocation* location;
@property(readonly, assign, nonatomic) NSString* debugDescription;
@property(readonly, assign, nonatomic) NSString* defaultName;
@property(readonly, assign, nonatomic) NSString* locationTitle;
@property(readonly, assign, nonatomic) NSString* infoCardTitle;
@property(readonly, assign, nonatomic) NSString* displayTitle;
@property(readonly, assign, nonatomic) BOOL canUseNameAsOrg;
@property(readonly, assign, nonatomic) BOOL isDynamicCurrentLocation;
@property(readonly, assign, nonatomic) BOOL performsReverseGeocodeCheck;
@property(readonly, assign, nonatomic) BOOL needsReverseGeocodeCheck;
@property(readonly, assign, nonatomic) NSString* adLine2;
@property(readonly, assign, nonatomic) NSString* adLine1;
@property(readonly, assign, nonatomic) BOOL isAd;
@property(readonly, assign, nonatomic) NSString* resultIdentifier;
+(id)currentLocationSearchResultName;
+(id)customLocationSearchResultName;
+(id)defaultNameForType:(int)type;
+(id)formatStringForMapsURLWithName;
+(id)formatStringForMapsURLWithLatLon;
+(id)searchResultWithDictionaryRepresentation:(id)dictionaryRepresentation fileVersion:(int)version;
+(id)searchResultWithDictionaryRepresentation:(id)dictionaryRepresentation;
+(id)currentLocationSearchResult;
+(id)customSearchResultWithCoordinate:(CADoublePoint)coordinate;
+(int)_indexToInsertResultWithDistance:(double)distance distanceDictionary:(id)dictionary sortedArray:(id)array;
+(id)distanceSortedResults:(id)results fromPoint:(CGPoint)point;
+(id)keyPathsForValuesAffectingDisplayTitle;
+(id)keyPathsForValuesAffectingLocationTitle;
+(id)keyPathsForValuesAffectingName;
+(id)keyPathsForValuesAffectingTitle;
+(id)keyPathsForValuesAffectingSubtitle;
+(id)keyPathsForValuesAffectingHasStructuredAddress;
+(id)keyPathsForValuesAffectingAddressDictionary;
+(id)keyPathsForValuesAffectingSingleLineAddress;
+(id)keyPathsForValuesAffectingSingleLineAddressWithHomeCountry;
+(id)keyPathsForValuesAffectingRouteLocation;
+(id)keyPathsForValuesAffectingLocation;
+(id)keyPathsForValuesAffectingIsValid;
+(id)keyPathsForValuesAffectingLooksLikeBusiness;
+(id)keyPathsForValuesAffectingReverseGeocoded;
+(id)keyPathsForValuesAffectingAuthor;
-(id)init;
-(id)initWithSearchResult:(id)searchResult includeStreetView:(BOOL)view includeAddress:(BOOL)address;
-(id)initWithSearchResult:(id)searchResult;
-(id)initWithGMMSearchResult:(id)gmmsearchResult type:(int)type originalQuery:(id)query;
-(id)initWithType:(int)type;
-(id)initWithSearchResult:(id)searchResult type:(int)type;
-(BOOL)isLocationEqual:(id)equal withinDistance:(double)distance;
-(BOOL)isEqual:(id)equal;
-(BOOL)readFrom:(id)from;
-(void)writeTo:(id)to;
-(id)copyWithType:(int)type name:(id)name mapType:(unsigned)type3 zoomLevel:(unsigned)level;
-(id)copyWithType:(int)type;
-(id)copyWithCoordinate:(CADoublePoint)coordinate;
-(id)copyWithLongLat:(CGPoint)longLat includeStreetView:(BOOL)view includeAddress:(BOOL)address;
-(id)copyWithZone:(NSZone*)zone;
-(void)didUpdateAddress;
-(id)_formattedAddress;
-(id)mapsURL;
-(id)copyWithLongLat:(CGPoint)longLat;
-(id)description;
-(void)dealloc;
-(void)clearLocationInformation;
-(void)setCoordinate:(CADoublePoint)coordinate preserveLocationInfo:(BOOL)info;
-(void)setName:(id)name;
-(void)setAddressFromSearchResult:(id)searchResult;
-(void)setAddressFromPlacemark:(id)placemark;
-(int)color;
-(void)becomeDefaultTypeIfCustomType;
-(id)name;
-(id)title;
-(id)subtitle;
-(void)_parseAndMergeFormattedAddress;
-(id)_formattedAddressDictionary;
-(id)_structuredAddressDictionaryWithHomeCounty:(BOOL)homeCounty;
-(id)_addressWithHomeCountry:(BOOL)homeCountry;
-(id)addressDictionary;
-(id)singleLineAddress;
-(id)singleLineAddressWithHomeCountry;
-(BOOL)hasAccurateAddress;
-(id)_longLatString;
-(id)routeLocation;
-(BOOL)isValid;
-(BOOL)isInMapRect:(XXStruct_Yvvv9D)mapRect;
-(BOOL)looksLikeBusiness;
-(void)resetMetadata;
-(void)becomeDefaultTypeIfAdType;
@end

@interface MKSearchResult (MKAddressBookSearchResult)
@property(retain, nonatomic) MKAddressBookAddress* address;
-(id)initWithSearchResult:(id)searchResult address:(id)address;
-(id)initWithSearchResultStrippingName:(id)searchResultStrippingName address:(id)address;
-(BOOL)isAddressBookResult;
@end

