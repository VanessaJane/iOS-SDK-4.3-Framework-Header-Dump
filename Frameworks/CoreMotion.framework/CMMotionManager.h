/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/CoreMotion.framework/CoreMotion
 */

#import "CoreMotion-Structs.h"
#import <Foundation/NSObject.h>

@class CMGyroData, CMAccelerometerData, CMMagnetometerData, CMDeviceMotion;

@interface CMMotionManager : NSObject {
@private
	id _internal;
}
@property(readonly, assign, nonatomic, getter=isAccelerometerAvailable) BOOL accelerometerAvailable;
@property(readonly, assign, nonatomic, getter=isAccelerometerActive) BOOL accelerometerActive;
@property(assign, nonatomic) double accelerometerUpdateInterval;
@property(readonly, assign) CMAccelerometerData* accelerometerData;
@property(readonly, assign, nonatomic, getter=isGyroAvailable) BOOL gyroAvailable;
@property(readonly, assign, nonatomic, getter=isGyroActive) BOOL gyroActive;
@property(assign, nonatomic) double gyroUpdateInterval;
@property(readonly, assign) CMGyroData* gyroData;
@property(readonly, assign, nonatomic, getter=isDeviceMotionAvailable) BOOL deviceMotionAvailable;
@property(readonly, assign, nonatomic, getter=isDeviceMotionActive) BOOL deviceMotionActive;
@property(assign, nonatomic) double deviceMotionUpdateInterval;
@property(readonly, assign) CMDeviceMotion* deviceMotion;
@property(assign, nonatomic) BOOL showsDeviceMovementDisplay;
@property(readonly, assign) CMMagnetometerData* magnetometerData;
@property(readonly, assign, nonatomic, getter=isMagnetometerActive) BOOL magnetometerActive;
@property(readonly, assign, nonatomic, getter=isMagnetometerAvailable) BOOL magnetometerAvailable;
@property(assign, nonatomic) double magnetometerUpdateInterval;
+(void)setAllowInBackground:(BOOL)background;
-(id)init;
-(id)initPrivate;
-(void)dealloc;
-(void)deallocPrivate;
-(void)startAccelerometerUpdates;
-(void)startAccelerometerUpdatesToQueue:(id)queue withHandler:(id)handler;
-(void)stopAccelerometerUpdates;
-(void)setAccelerometerUpdateIntervalPrivate:(double)aPrivate;
-(void)startAccelerometerUpdatesPrivateToQueue:(id)queue withHandler:(id)handler;
-(void)stopAccelerometerUpdatesPrivate;
-(void)startGyroUpdates;
-(void)startGyroUpdatesToQueue:(id)queue withHandler:(id)handler;
-(void)stopGyroUpdates;
-(void)setGyroUpdateIntervalPrivate:(double)aPrivate;
-(void)startGyroUpdatesPrivateToQueue:(id)queue withHandler:(id)handler;
-(void)stopGyroUpdatesPrivate;
-(void)startDeviceMotionUpdates;
-(void)startDeviceMotionUpdatesToQueue:(id)queue withHandler:(id)handler;
-(void)stopDeviceMotionUpdates;
-(void)setAccelerometerDataCallback:(/*function-pointer*/ void*)callback info:(void*)info interval:(double)interval;
-(void)setGyroDataCallback:(/*function-pointer*/ void*)callback info:(void*)info interval:(double)interval;
-(void)setDeviceMotionCallback:(/*function-pointer*/ void*)callback info:(void*)info interval:(double)interval fsync:(BOOL)fsync bandwidth:(int)bandwidth;
-(void)setDeviceMotionUpdateIntervalPrivate:(double)aPrivate;
-(void)startDeviceMotionUpdatesPrivateToQueue:(id)queue withHandler:(id)handler;
-(void)stopDeviceMotionUpdatesPrivate;
-(void)startMagnetometerUpdates;
-(void)startMagnetometerUpdatesToQueue:(id)queue withHandler:(id)handler;
-(void)stopMagnetometerUpdates;
-(void)setMagnetometerUpdateIntervalPrivate:(double)aPrivate;
-(void)startMagnetometerUpdatesPrivateToQueue:(id)queue withHandler:(id)handler;
-(void)stopMagnetometerUpdatesPrivate;
-(void)dismissDeviceMovementDisplay;
-(void)setShowsDeviceMovementDisplayPrivate:(BOOL)aPrivate;
-(void)onAccelerometer:(const Sample*)accelerometer;
-(void)onGyro:(const Sample*)gyro;
-(void)onDeviceMotion:(const Sample*)motion;
-(void)onMagnetometer:(const Sample*)magnetometer;
-(void)willResignActive:(id)active;
-(void)didBecomeActive:(id)active;
-(void)willResignActivePrivate:(id)aPrivate;
-(void)didBecomeActivePrivate:(id)aPrivate;
-(void)dummySelector:(id)selector;
@end

