/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/EventKit.framework/EventKit
 */

#import <XXUnknownSuperclass.h> // Unknown library

@class NSString, NSMutableArray, NSTimeZone, EKCalendar, NSArray, NSMutableDictionary;

@interface EKEventStore : XXUnknownSuperclass {
@private
	id _database;
	NSMutableDictionary* _calendars;
	NSMutableDictionary* _sources;
	NSMutableArray* _observers;
	unsigned _flags;
	NSTimeZone* _timeZone;
}
@property(readonly, assign, nonatomic) EKCalendar* defaultCalendarForNewEvents;
@property(readonly, assign, nonatomic) NSArray* calendars;
@property(readonly, assign, nonatomic) NSString* eventStoreIdentifier;
+(id)storeWithOptions:(unsigned long)options path:(id)path;
-(id)init;
-(id)initWithOptions:(unsigned long)options path:(id)path;
-(void)dealloc;
-(void)setTimeZone:(id)zone;
-(id)timeZone;
-(unsigned)serverPort;
-(void)_databaseChangedExternally;
-(void)daemonRestarted;
-(int)readWriteCalendarCount;
-(id)readWriteCalendars;
-(id)calendarWithID:(id)anId;
-(id)sourceWithID:(id)anId;
-(void)_saveWithNotify:(BOOL)notify;
-(void)_save;
-(void)_notifyStoreChanged;
-(BOOL)saveCalendar:(id)calendar error:(id*)error;
-(BOOL)saveCalendar:(id)calendar deferred:(BOOL)deferred error:(id*)error;
-(BOOL)removeCalendar:(id)calendar error:(id*)error;
-(id)eventWithIdentifier:(id)identifier;
-(id)_eventWithURI:(id)uri checkValid:(BOOL)valid;
-(id)eventForUID:(id)uid occurrenceDate:(id)date;
-(id)eventWithUniqueId:(id)uniqueId;
-(BOOL)saveEvent:(id)event span:(int)span error:(id*)error;
-(BOOL)removeEvent:(id)event span:(int)span error:(id*)error;
-(BOOL)setEventParticipationStatus:(id)status status:(int)status2 applyToAll:(BOOL)all error:(id*)error;
-(BOOL)markEventRead:(id)read error:(id*)error;
-(id)importICS:(id)ics intoCalendar:(id)calendar options:(unsigned)options;
-(id)importICSData:(id)data intoCalendar:(id)calendar options:(unsigned)options;
-(void)setDefaultCalendarForNewEvents:(id)newEvents;
-(id)defaultCalendarForNewTasks;
-(void)refreshAccountListIfNecessary;
-(void)refreshAccountDataIfNecessary;
-(id)eventsMatchingPredicate:(id)predicate;
-(void)enumerateEventsMatchingPredicate:(id)predicate usingBlock:(id)block;
-(id)predicateForEventsWithStartDate:(id)startDate endDate:(id)date calendars:(id)calendars;
-(id)predicateForEventsWithStartDate:(id)startDate endDate:(id)date eventIdentifier:(id)identifier calendars:(id)calendars;
@end

