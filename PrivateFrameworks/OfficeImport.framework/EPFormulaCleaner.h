/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/OfficeImport.framework/OfficeImport
 */

#import "EPFormulaCleaner.h"
#import "EDProcessor.h"

@class EDSheet, EDRowBlocks, EDName, EDFormula;

__attribute__((visibility("hidden")))
@interface EPFormulaCleaner : EDProcessor {
@private
	EDSheet* mCurrentSheet;
	EDFormula* mFormula;
	EDName* mParentName;
	int mRowOffset;
	int mColumnOffset;
	EDRowBlocks* mBaseFormulaRowBlocks;
}
-(void)dealloc;
-(bool)isObjectSupported:(id)supported;
-(void)applyProcessorToObject:(id)object sheet:(id)sheet;
-(void)cleanFormula:(id)formula sheet:(id)sheet;
-(void)cleanFormula:(id)formula name:(id)name;
@end

@interface EPFormulaCleaner (Private)
-(void)cleanFormula:(id)formula sheet:(id)sheet name:(id)name;
-(bool)cleanTokenAtIndex:(unsigned)index removedTokenCount:(unsigned*)count;
-(void)addOffsetsToRow:(int*)row rowRelative:(bool)relative column:(int*)column columnRelative:(bool)relative4;
-(bool)isReferenceValidInLassoForRow:(int)row rowRelative:(bool)relative column:(int)column columnRelative:(bool)relative4;
-(bool)isReferenceValidInLassoForSheet:(id)sheet rowMin:(int)min rowMinRelative:(bool)relative rowMax:(int)max rowMaxRelative:(bool)relative5 columnMin:(int)min6 columnMinRelative:(bool)relative7 columnMax:(int)max8 columnMaxRelative:(bool)relative9;
-(void)updateSheet:(id)sheet row:(int)row rowRelative:(bool)relative column:(int)column columnRelative:(bool)relative5;
-(void)updateSheet:(id)sheet rowMin:(int)min rowMinRelative:(bool)relative rowMax:(int)max rowMaxRelative:(bool)relative5 columnMin:(int)min6 columnMinRelative:(bool)relative7 columnMax:(int)max8 columnMaxRelative:(bool)relative9;
-(bool)cleanArray:(unsigned)array;
-(bool)cleanRef:(unsigned)ref;
-(bool)cleanArea:(unsigned)area;
-(bool)cleanRef3D:(unsigned)d;
-(bool)cleanArea3D:(unsigned)d;
-(bool)cleanName:(unsigned)name;
-(bool)cleanNameX:(unsigned)x;
-(bool)cleanFunc:(unsigned)func;
-(bool)cleanFuncVar:(unsigned)var;
-(bool)cleanUnion:(unsigned)aUnion;
-(bool)cleanIsect:(unsigned)isect removedTokenCount:(unsigned*)count;
-(bool)cleanRange:(unsigned)range removedTokenCount:(unsigned*)count;
-(bool)combineCellReferences:(unsigned)references intersection:(bool)intersection removedTokenCount:(unsigned*)count;
-(bool)isLinkReferenceIndexSupported:(unsigned)supported allowExternal:(bool)external;
-(id)worksheetFromLinkReferenceIndex:(unsigned)linkReferenceIndex loadIfNeeded:(bool)needed;
-(bool)cleanName:(unsigned)name nameIndex:(unsigned)index sheetIndex:(unsigned)index3;
-(bool)checkFunctionId:(int)anId tokenIndex:(unsigned)index;
-(bool)checkSupportedAddInName:(id)name externalLink:(bool)link;
-(bool)checkCustomFunction:(unsigned)function;
-(void)updateWorksheet:(id)worksheet row:(int)row column:(int)column inDictionary:(id)dictionary;
-(void)applyMaxCellsInName:(id)name;
-(bool)useEvaluationStackToCheckFunctionId:(int)checkFunctionId functionName:(id)name tokenIndex:(unsigned)index;
-(unsigned)useEvaluationStackToGetParameter:(unsigned)getParameter tokenIndex:(unsigned)index;
-(id)useEvaluationStackToGetParameter:(unsigned)getParameter tokenIndex:(unsigned)index allReferencesAllowed:(bool)allowed success:(bool*)success;
-(id)extractFormulaToCleanFromSharedFormula:(id)sharedFormula;
-(void)reportWarning:(int)warning;
-(void)reportWarning:(int)warning parameter:(id)parameter;
-(void)reset;
@end

@interface EPFormulaCleaner (EPInternal)
-(void)prepareToProcessFormula:(id)processFormula sheet:(id)sheet name:(id)name;
@end

