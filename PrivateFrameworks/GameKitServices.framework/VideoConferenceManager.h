/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/GameKitServices.framework/GameKitServices
 */

#import "GameKitServices-Structs.h"
#import "NSMachPortDelegate.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class ICEResultWaitQueue, NSMachPort, VideoConference, GKNATObserver, NSMutableArray;

__attribute__((visibility("hidden")))
@interface VideoConferenceManager : XXUnknownSuperclass <NSMachPortDelegate> {
@private
	opaque_pthread_mutex_t stateLock;
	NSMutableArray* vcList;
	VideoConference* activeConference;
	VideoConference* conferenceWithMic;
	ICEResultWaitQueue* resultQueue;
	tagHANDLE* hAUIO;
	tagHANDLE* hSIP;
	int audioRefCount;
	int sipRefCount;
	BOOL shouldSetupAudioSession;
	BOOL enableSpeakerPhone;
	int internalSampleRate;
	int hardwareSampleRate;
	int internalBlockSize;
	int encodeBitrate;
	int clientPID;
	BOOL isUsingSuppression;
	BOOL isForcingAudioBitrate;
	GKNATObserver* natObserver;
	BOOL isTetheredDisplayMode;
	opaqueCMSession* cmSession;
	int cmSessionRefCount;
	BOOL tearDownCMSession;
	NSMachPort* cmSessionMachPort;
	int startToken;
	int stopToken;
	dispatch_queue_s* cmSessionQueue;
}
@property(assign) VideoConference* activeConference;
@property(assign) VideoConference* conferenceWithMic;
@property(readonly, assign) ICEResultWaitQueue* resultQueue;
@property(assign) BOOL shouldSetupAudioSession;
@property(assign, getter=isSpeakerPhoneEnabled) BOOL enableSpeakerPhone;
@property(assign) int internalSampleRate;
@property(readonly, assign) NSMutableArray* vcList;
@property(assign, nonatomic) int clientPID;
@property(assign, nonatomic) BOOL isUsingSuppression;
@property(assign) BOOL isForcingAudioBitrate;
+(id)defaultVideoConferenceManager;
-(id)init;
-(tagHANDLE*)SIPHandle;
-(void)createSIP;
-(void)startSIP;
-(void)stopSIP;
-(void)addVideoConference:(id)conference;
-(void)removeVideoConference:(id)conference;
-(id)conferenceForCallID:(int)callID;
-(BOOL)hasVideoConference:(id)conference;
-(id)conferenceForParticipantID:(id)participantID;
-(BOOL)projectionModeEnabledState;
-(id)conferenceForIncomingConnectionResult:(tagCONNRESULT*)incomingConnectionResult;
-(BOOL)startAudioIO:(AudioStreamBasicDescription)io sampleRate:(int)rate minSamplesPerFrame:(int)frame audioBundle:(int)bundle remoteVCCallInfo:(id)info error:(id*)error;
-(BOOL)tearDownAudioIO:(BOOL)io;
-(BOOL)stopAudioIO;
-(void)setMicrophoneMuted:(BOOL)muted;
-(void)setEncodeBitrate:(int)bitrate;
-(void)enableMetering:(BOOL)metering isInputMeter:(BOOL)meter;
-(void)setupAudioSessionProperties;
-(void)startAudioSession;
-(void)stopAudioSession;
-(void)tearDownAudioSession:(BOOL)session;
-(BOOL)forceSampleRate:(double*)rate;
-(BOOL)forceBufferFrames:(int*)frames;
-(BOOL)forceBufferDuration:(float*)duration;
-(void)resetAudioSessionProperties;
-(void)pauseVideoConferences:(BOOL)conferences;
-(void)handleAudioInterruption:(opaqueCMSession*)interruption interruptionInfo:(CFDictionaryRef)info cmd:(unsigned)cmd;
-(void)handleRouteChanged:(opaqueCMSession*)changed;
-(void)handleMachMessage:(void*)message;
@end

