/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/IMAVCore.framework/IMAVCore
 */

#import "IMSystemMonitorListener.h"
#import <XXUnknownSuperclass.h> // Unknown library
#import "IMAVCore-Structs.h"
#import "IMAVChat.h"

@class IMHandle, NSString, NSData, NSDictionary, NSMutableDictionary, NSMutableArray, NSTimer, NSDate, NSError, IMPair, IMAccount, NSArray, IMAVChatParticipant, IMAVChatFeature;
@protocol IMAVChatDelegate;

@interface IMAVChat : XXUnknownSuperclass <IMSystemMonitorListener> {
	NSString* _GUID;
	NSString* _conferenceID;
	NSMutableArray* _participants;
	IMHandle* _initiator;
	IMAVChatParticipant* _localParticipant;
	NSDictionary* _errorDict;
	NSDate* _dateCreated;
	NSDate* _dateStartedConnecting;
	NSDate* _dateConnected;
	NSDate* _dateEnded;
	NSString* _participantNames;
	NSData* _connectData;
	NSDictionary* _callerProperties;
	NSMutableDictionary* _unknownPartyStates;
	dispatch_queue_s* _queue;
	int _ardRole;
	IMAVChatFeature* _recorder;
	IMAVChatFeature* _auxVideo;
	IMAVChatFeature* _ard;
	NSTimer* _inviteTimeoutTimer;
	NSTimer* _connectionTimeoutTimer;
	NSTimer* _screenSaverBlockingTimer;
	id _conferenceController;
	id _delegate;
	int _callID;
	unsigned _sessionID;
	unsigned _addStatus;
	NSError* _error;
	int _addableParticipants;
	unsigned _localState;
	unsigned _lastPostedState;
	int _securityLevel;
	IMPair* _pendingPreemptiveRelayInitate;
	NSString* _callStatisticsGUID;
	double _connectionTimeoutTime;
	double _invitationTimeoutTime;
	BOOL _securityExpectedByInitiator;
	BOOL _hasGatheredInfo;
	BOOL _silentConference;
	BOOL _isListening;
	BOOL _isCounterProposalConnect;
	BOOL _hasPendingAccept;
	BOOL _hasPendingInit;
	BOOL _isTerminating;
	BOOL _needToSendEndConferenceNotification;
	BOOL _Q8IrisOpen;
	BOOL _usingCoercedIDs;
	BOOL _suppressBeginChat;
	BOOL _isCaller;
	BOOL _isVideo;
	BOOL _dataOut;
	BOOL _dataIn;
	BOOL _didRemoteMute;
	BOOL _didRemotePause;
	BOOL _remoteNetworkStall;
	BOOL _participantOrderFinal;
	int _connectionType;
}
@property(readonly, assign, nonatomic) dispatch_queue_s* _queue;
@property(assign, nonatomic, setter=_setConnectionType:) int _connectionType;
@property(retain, nonatomic, setter=_setCallStatisticsGUID:) NSString* _callStatisticsGUID;
@property(readonly, assign, nonatomic) BOOL isQ8IrisOpen;
@property(readonly, assign, nonatomic) unsigned sessionID;
@property(readonly, assign, nonatomic) NSDictionary* callerProperties;
@property(readonly, retain, nonatomic) IMHandle* initiatorIMHandle;
@property(assign, setter=setConferenceSilent:) BOOL isConferenceSilent;
@property(readonly, assign, nonatomic) BOOL isCaller;
@property(readonly, assign, nonatomic) BOOL dataOut;
@property(readonly, assign, nonatomic) BOOL dataIn;
@property(assign, nonatomic, setter=setCallID:) int callID;
@property(retain, nonatomic, setter=_setConferenceID:) NSString* conferenceID;
@property(retain, nonatomic, setter=setGUID:) NSString* GUID;
@property(assign, nonatomic, setter=_setConferenceController:) id _conferenceController;
@property(readonly, assign, nonatomic) NSDate* dateConnected;
@property(readonly, assign, nonatomic) NSDate* dateCreated;
@property(readonly, assign, nonatomic) NSDate* dateEnded;
@property(readonly, assign, nonatomic) int addableParticipants;
@property(readonly, assign, nonatomic) unsigned addStatus;
@property(readonly, assign, nonatomic) unsigned state;
@property(readonly, retain, nonatomic) IMAVChatParticipant* localParticipant;
@property(readonly, retain, nonatomic) NSArray* participants;
@property(readonly, retain, nonatomic) IMAVChatParticipant* initiatorParticipant;
@property(readonly, assign, nonatomic) int numActiveParticipants;
@property(readonly, retain, nonatomic) NSArray* remoteParticipants;
@property(readonly, assign, nonatomic) BOOL canUseRelay;
@property(readonly, assign, nonatomic) BOOL isActive;
@property(readonly, assign, nonatomic) BOOL isStateFinal;
@property(readonly, assign, nonatomic) BOOL isOneWay;
@property(readonly, assign, nonatomic) BOOL isVideo;
@property(readonly, assign, nonatomic) BOOL isAOLInterop;
@property(readonly, assign, nonatomic) NSDictionary* vcErrorReport;
@property(readonly, assign, nonatomic) NSDictionary* errorDictionary;
@property(readonly, assign, nonatomic) NSString* participantNames;
@property(readonly, assign, nonatomic) unsigned endedReason;
@property(readonly, assign, nonatomic) int endedError;
@property(readonly, retain, nonatomic) IMAccount* account;
@property(readonly, retain, nonatomic) IMHandle* otherIMHandle;
@property(assign, nonatomic) id<IMAVChatDelegate> delegate;
+(id)allowedClassesForArchives;
+(int)systemSupportsNewOutgoingConferenceTo:(id)to isVideo:(BOOL)video;
-(id)initPersistentAVChatWith:(id)with invitedBy:(id)by ARDRole:(int)role sessionID:(unsigned)anId video:(BOOL)video;
-(void)_determineDataIn;
-(id)_initWith:(id)with invitedBy:(id)by ARDRole:(int)role sessionID:(unsigned)anId video:(BOOL)video extraProperties:(id)properties;
-(id)initIncomingFrom:(id)from isVideo:(BOOL)video callerProperties:(id)properties;
-(id)initOutgoingTo:(id)to isVideo:(BOOL)video ARDRole:(int)role;
-(id)initOutgoingTo:(id)to isVideo:(BOOL)video;
-(void)dealloc;
-(id)description;
-(void)beginChat;
-(void)endChat;
-(void)endChatWithReason:(unsigned)reason;
-(void)endChatWithError:(int)error;
-(void)_endChatWithReason:(unsigned)reason andError:(int)error;
-(void)endChatWithReason:(unsigned)reason error:(int)error;
-(id)inviteesInfoAsPlist:(BOOL)plist account:(id)account;
-(void)inviteAll;
-(void)_cancelInvitationWithReason:(unsigned)reason error:(int)error;
-(void)cancelInvitation;
-(void)_sendVCUpdateTo:(id)to skipConnected:(BOOL)connected;
-(void)invite:(id)invite;
-(void)acceptInvitation;
-(void)declineInvitationWithResponse:(unsigned)response;
-(void)declineInvitation;
-(void)sendARDFileTransferAuthorization:(id)authorization to:(id)to;
-(void)_setStateDisconnected;
-(void)_connectTo:(id)to withData:(id)data;
-(void)_prepareConnectionForParticipant:(id)participant;
-(void)_mainThreadFinishPrepareConnectionForInvitedParty:(id)invitedParty;
-(void)_threadedPrepareConnectionForInvitedParty:(id)invitedParty;
-(BOOL)_checkVCResponseDict:(id)dict;
-(void)_counterPropose:(id)propose;
-(void)_responseToVCInvite:(id)vcinvite;
-(void)_VCCounterProposal:(id)proposal;
-(void)handleGenericAVMessageFromParticipant:(id)participant type:(unsigned)type userInfo:(id)info;
-(void)_subscribeToVCNotifications;
-(void)_imHandleStatusChanged:(id)changed;
-(void)_initiatorInfoChanged:(id)changed;
-(void)_inviteeInfoChanged:(id)changed;
-(void)_participantsChanged:(id)changed;
-(void)handleVideoConferenceNotification:(id)notification;
-(void)invalidateParticipantNames;
-(id)participantWithID:(id)anId;
-(id)vcPartyIDForIMHandle:(id)imhandle;
-(id)participantMatchingIMHandle:(id)handle;
-(void)_setCallerProperties:(id)properties;
-(void)_setCreationDate;
-(id)error;
-(void)_handleAVError:(id)error;
-(void)_setErrorDictionary:(id)dictionary;
-(void)_reportError:(id)error;
@end

@interface IMAVChat (IMAVChatVideoLayers)
@property(assign, nonatomic) void* localVideoBackLayer;
@property(assign, nonatomic) void* localVideoLayer;
@end

@interface IMAVChat (IMAVChatCameraAdditions)
@property(assign, nonatomic) BOOL lockCamera;
@property(assign, nonatomic) unsigned cameraType;
@property(assign, nonatomic) unsigned cameraOrientation;
-(BOOL)openCamera;
-(BOOL)closeCamera;
-(BOOL)startPreviewWithError:(id*)error;
-(BOOL)stopPreview;
@end

@interface IMAVChat (Logging_Private)
@property(retain, nonatomic, setter=_setCallStatisticsGUID:) NSString* _callStatisticsGUID;
@property(assign, nonatomic, setter=_setConnectionType:) int _connectionType;
-(id)_callLoggingOutput;
-(void)_submitCrashTracerLogs;
-(void)_reportCallStatistics:(id)statistics;
@end

@interface IMAVChat (IMAVChatTimers_Private)
-(void)_clearConnectionTimeoutTimer;
-(void)_setConnectionTimeoutTimer;
-(void)_connectionTimeout:(id)timeout;
-(void)_clearInvitationTimeoutTimer;
-(void)_setInvitationTimeoutTimer;
-(void)_invitationTimeout:(id)timeout;
-(void)_clearScreenSaverBlockingTimer;
-(void)_setScreenSaverBlockingTimer;
@end

@interface IMAVChat (IMAVChatTimeouts)
@property(assign, nonatomic) double connectionTimeoutTime;
@property(assign, nonatomic) double invitationTimeoutTime;
+(double)defaultInvitationTimeoutTime;
+(void)setDefaultInvitationTimeoutTime:(double)time;
+(double)defaultConnectionTimeoutTime;
+(void)setDefaultConnectionTimeoutTime:(double)time;
-(void)_blockScreenSaver:(id)saver;
@end

@interface IMAVChat (VCInterface)
-(void)_unknownParty:(id)party didConnect:(BOOL)connect;
-(void)_unknownParty:(id)party muteOrPause:(unsigned)pause didChange:(BOOL)change;
-(void)conferencePersonWithID:(id)anId completedWithInfo:(id)info;
-(void)conferenceHungUpByPersonWithID:(id)anId;
-(void)conferencePersonWithID:(id)anId didConnect:(BOOL)connect;
-(void)conferencePersonWithID:(id)anId didCancel:(BOOL)cancel;
-(void)conferencePersonWithID:(id)anId didMute:(BOOL)mute;
-(void)conferencePersonWithID:(id)anId didPause:(BOOL)pause;
-(void)conferencePersonWithID:(id)anId didStall:(BOOL)stall;
-(void)conferencePersonWithID:(id)anId hasInfoForInsufficientBandwidth:(id)insufficientBandwidth;
-(void)conferencePersonWithID:(id)anId hasInfoForNoPackets:(id)noPackets;
-(void)conferenceHasVideoError;
-(void)conferenceHasTimedOut;
-(BOOL)shouldConferenceAcceptIncomingRequestFromUser:(id)user onLocalSubnetOnly:(BOOL*)only;
-(BOOL)conferencePersonWithID:(id)anId hasValidRemoteCertificate:(SecCertificate*)certificate;
-(void)conferencePersonWithID:(id)anId securityDidChange:(BOOL)security;
-(void)conferencePersonWithID:(id)anId certificateRejected:(BOOL)rejected;
-(void)conferencePersonWithID:(id)anId sendRelayRequest:(id)request;
-(void)conferencePersonWithID:(id)anId sendRelayUpdate:(id)update;
-(void)conferencePersonWithID:(id)anId sendRelayCancel:(id)cancel;
-(void)_configureVCC;
-(void)_configureVCCRecv;
-(void)connectProc:(id)proc;
-(void)_noteConferenceConnected:(id)connected;
-(void)startVCOnMainThread:(id)thread;
-(void)_vccInitDidFinish;
@end

@interface IMAVChat (IMAVChatVideoAdditions)
@property(readonly, assign, nonatomic) BOOL didRemotePause;
@property(assign, nonatomic) BOOL allowsVideo;
@property(assign, nonatomic) BOOL isSendingVideo;
@property(readonly, assign, nonatomic) BOOL isChatPaused;
@property(assign, nonatomic, setter=setRemotePaused:) BOOL isRemotePaused;
@property(assign, nonatomic, setter=setPaused:) BOOL isPaused;
-(void)togglePaused;
-(void)toggleRemotePaused;
-(void)toggleChatPaused;
-(void)toggleSendingVideo;
-(BOOL)isLocalNetworkStalled;
-(BOOL)isRemoteNetworkStalled;
@end

@interface IMAVChat (IMAVChatAudioAdditions)
@property(readonly, assign, nonatomic) BOOL didRemoteMute;
@property(assign, nonatomic) BOOL isSendingAudio;
@property(readonly, assign, nonatomic) BOOL isChatMute;
@property(assign, nonatomic, setter=setRemoteMute:) BOOL isRemoteMute;
@property(assign, nonatomic, setter=setMute:) BOOL isMute;
@property(assign, nonatomic) float audioVolume;
-(void)toggleMute;
-(void)toggleRemoteMute;
-(void)toggleChatMute;
-(void)toggleSendingAudio;
@end

@interface IMAVChat (IMAVChatActions_Private)
@end

@interface IMAVChat (RelayAdditions)
-(void)_handleRelayInitate:(id)initate fromParticipant:(id)participant;
-(void)_handleRelayUpdate:(id)update fromParticipant:(id)participant;
-(void)_handleRelayCancel:(id)cancel fromParticipant:(id)participant;
-(void)_relayPropose:(id)propose;
-(BOOL)canUseRelay;
-(int)_initialRelayStatus;
@end

@interface IMAVChat (AVChatInfo)
+(void)_doSendUpdate;
+(void)_sendUpdate;
+(id)currentAVChatInfo;
+(void)getVideoStillForIMHandle:(id)imhandle data:(id*)data result:(unsigned*)result;
-(id)_currentAVChatInfo;
@end

@interface IMAVChat (Security_Private)
-(int)securityLevel;
-(int)_theoreticalSecurityLevel;
-(int)_currentSecurityLevel;
-(void)_updateSecurity;
-(BOOL)_allParticipantsCanBeSecure;
-(void)_setupIdentity;
-(void)_serviceCapsChanged:(id)changed;
@end

@interface IMAVChat (StateMachine)
+(BOOL)isStateFinal:(unsigned)final;
+(BOOL)isStateActive:(unsigned)active;
-(BOOL)isStateFinal;
-(BOOL)isActive;
-(void)_setActiveConference;
-(void)participant:(id)participant changedFromState:(unsigned)state toState:(unsigned)state3;
-(void)_postStateToDelegateIfNecessary;
-(void)systemDidFastUserSwitchOut;
-(void)notifySystemVC:(BOOL)vc;
@end

@interface IMAVChat (Participants)
@property(readonly, assign, nonatomic) BOOL _allParticipantsUsingICE;
+(int)maxRemoteParticipantsVideo:(BOOL)video;
-(void)_peerID:(id)anId changedTo:(id)to;
-(void)_updateIMHandleInBuddyList:(id)buddyList;
-(void)_noteStatusChangesForParticipant:(id)participant;
-(void)_insertRemoteParticipant:(id)participant atIndex:(unsigned)index;
-(void)_removeRemoteParticipant:(id)participant;
-(BOOL)_moveVCPartyID:(id)anId toIndex:(unsigned)index inCount:(unsigned)count;
-(void)_finalizeParticipantOrder:(id)order andNotify:(BOOL)notify;
-(id)participantsNotInNuggets:(id)nuggets;
-(void)_updateParticipantsWithData:(id)data;
-(BOOL)_imHandlesRequireCoercedIDs:(id)ids;
-(void)_initParticipantsWithIMHandles:(id)imhandles;
-(void)_initParticipantsWithNuggets:(id)nuggets;
-(void)_noteInviteDeliveredForParticipant:(id)participant;
-(BOOL)_participantsCheckOut;
-(id)initiatorParticipant;
-(id)remoteParticipants;
-(int)numActiveParticipants;
-(void)_refreshAddableParticipants;
-(id)_participantMatchingVCPartyID:(id)anId;
-(id)stringForAddStatus:(unsigned)addStatus;
-(id)stringForAddStatus;
-(unsigned)addStatusForIMHandle:(id)imhandle asVideo:(BOOL)video ardRole:(int)role;
-(BOOL)canAddIMHandle:(id)handle;
-(void)removeParticipantWithID:(id)anId;
-(id)orderedRemotePartyIDs;
-(void)finalizeOrderWithVideoFrom:(id)from;
@end

@interface IMAVChat (Lookup_Private)
+(id)_avChatArray;
+(id)chatWithSessionID:(unsigned)sessionID;
+(id)chatList;
+(id)connectedChat;
+(id)activeChat;
+(id)nonFinalChat;
+(id)avChatWithConferenceID:(id)conferenceID;
+(id)incomingInvitations;
+(id)outgoingInvitations;
+(id)connectingChats;
+(id)connectedChats;
+(id)chatsWithIMAVChatState:(unsigned)imavchatState;
+(id)bestGuessAVChatWithIMHandle:(id)imhandle conferenceID:(id)anId sessionID:(unsigned)anId3 properties:(id)properties;
+(BOOL)_anyOfTheseParticipants:(id)theseParticipants matchAnyOfTheseIMHandles:(id)theseIMHandles;
+(BOOL)isIMHandleInActiveConference:(id)activeConference;
+(id)avChatInvitedByIMHandle:(id)handle orConferenceID:(id)anId;
+(id)avChatWaitingForReplyFromIMHandle:(id)imhandle orConferenceID:(id)anId;
+(id)avChatWithMatchingIMHandles:(id)matchingIMHandles video:(BOOL)video ARDRole:(int)role;
@end

