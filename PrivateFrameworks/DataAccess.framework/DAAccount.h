/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/DataAccess.framework/DataAccess
 */

#import "DataAccess-Structs.h"
#import "AccountCreationProtocol.h"
#import "BasicAccountSyncing.h"
#import "AccountFullAccountProtocol.h"
#import <XXUnknownSuperclass.h> // Unknown library
#import "DAAccount.h"

@class DASettingsTemplate, NSMutableDictionary, DAStatusReport, NSString, NSURL, NSArray, NSData;

@interface DAAccount : XXUnknownSuperclass <AccountCreationProtocol, BasicAccountSyncing> {
	int _dataclasses;
	BOOL _hasDirtyBits;
	BOOL _hasInitted;
	BOOL _shouldAutodiscoverPrincipalURL;
	BOOL _shouldPromptForPassword;
	BOOL _shouldFailAllTasks;
	int _originalDataclasses;
	CFDictionaryRef _changeTypesByDataclass;
	NSMutableDictionary* _haveWarnedAboutCertDict;
	DASettingsTemplate* _settingsTemplate;
	DAStatusReport* _statusReport;
	NSString* _embargoedPassword;
	NSURL* _urlToRemoveFromKeychain;
	CFDictionaryRef _consumers;
}
@property(readonly, assign) int enabledDataclassesBitmask;
@property(assign) BOOL shouldAutodiscoverPrincipalURL;
@property(retain) DASettingsTemplate* settingsTemplate;
@property(readonly, assign) DAStatusReport* statusReport;
@property(assign) BOOL shouldFailAllTasks;
@property(copy) NSData* identityPersist;
@property(assign) BOOL shouldPromptForPassword;
@property(copy) NSArray* emailAddresses;
@property(copy) NSString* emailAddress;
@property(copy) NSURL* principalURL;
@property(copy) NSString* scheme;
@property(readonly, retain, nonatomic) NSString* scheduleIdentifier;
@property(readonly, assign) BOOL isChildAccount;
@property(assign) BOOL useSSL;
@property(copy) NSString* password;
@property(assign) int port;
@property(copy) NSString* host;
@property(copy) NSString* user;
@property(copy) NSString* username;
@property(copy) NSString* accountDescription;
@property(readonly, copy) NSString* persistentUUID;
@property(readonly, copy) NSString* tag;
@property(assign, setter=setDAAccountVersion:) int daAccountVersion;
+(id)basicAccountProperties;
+(Class)accountClass;
+(Class)accountClassWithProperties:(id)properties;
+(Class)clientClass;
+(Class)daemonClass;
+(Class)classForAccountType:(id)accountType;
+(id)defaultProperties;
+(id)newAccountOfAccountType:(id)accountType;
-(void)dealloc;
-(id)initWithProperties:(id)properties;
-(id)init;
-(void)resetAccountID;
-(id)accountID;
-(id)syncStoreIdentifier;
-(void)_setPersistentUUID:(id)uuid;
-(BOOL)supportsDataclass:(int)dataclass;
-(BOOL)isDisabled;
-(BOOL)enabledForDataclass:(int)dataclass;
-(void)setEnabled:(BOOL)enabled forDataclass:(int)dataclass changeType:(int)type;
-(BOOL)originallyEnabledForDataclass:(int)dataclass;
-(int)accountChangeTypeForDataclass:(int)dataclass;
-(BOOL)accountBoolPropertyForKey:(id)key;
-(void)setAccountBoolProperty:(BOOL)property forKey:(id)key;
-(int)accountIntPropertyForKey:(id)key;
-(void)setAccountIntProperty:(int)property forKey:(id)key;
-(void)resumeMonitoringFoldersWithIDs:(id)ids;
-(void)suspendMonitoringFoldersWithIDs:(id)ids;
-(void)stopMonitoringFolderWithID:(id)anId;
-(id)stateString;
-(void)takeValuesFromAccount:(id)account;
-(id)usernameWithoutDomain;
-(id)domainOnly;
-(void)setConsumer:(id)consumer forTask:(id)task;
-(id)consumerForTask:(id)task;
-(void)removeConsumerForTask:(id)task;
-(void)checkValidityWithConsumer:(id)consumer;
-(BOOL)autodiscoverAccountConfigurationWithConsumer:(id)consumer;
-(void)cancelAutodiscovery;
-(void)_removeHostsToTrust;
-(BOOL)accountNeedsUpgrade;
-(BOOL)_upgradeSelfFromPreKirkwood;
-(BOOL)upgradeAccount;
-(void)_removePasswordFromKeychainKeepCache:(BOOL)keychainKeepCache;
-(void)removePasswordFromKeychain;
-(int)keychainAccessibilityType;
-(id)version;
-(void)setVersion:(id)version;
-(BOOL)accountContainsEmailAddress:(id)address;
-(id)urlForKeychain;
-(void)_setProperties:(id)properties;
-(BOOL)hasDirtyBits;
-(void)tearDown;
-(BOOL)monitorFoldersWithIDs:(id)ids;
-(BOOL)monitorFolderWithID:(id)anId;
-(void)stopMonitoringFoldersWithIDs:(id)ids;
-(void)stopMonitoringFolders;
-(id)defaultContainerIdentifierForDADataclass:(int)dadataclass;
-(void)setP12Data:(id)data password:(id)password;
-(void)removeClientCertificateData;
-(void)saveAccountProperties;
-(void)saveChildAccountSettingsWithAccountsManager:(id)accountsManager;
-(id)_exceptionsDict;
-(CFDataRef)exceptionsForDigest:(id)digest;
-(void)setExceptions:(CFDataRef)exceptions forDigest:(id)digest;
-(void)cleanupAccountFiles;
-(void)saveAccountSettings;
-(void)setEmbargoedPassword:(id)password;
-(BOOL)haveWarnedAboutCert:(id)cert;
-(void)setHaveWarnedAboutCert:(id)cert;
-(BOOL)resetCertWarnings;
-(void)resetStatusReport;
-(BOOL)isEqualToAccount:(id)account;
-(BOOL)isActiveSyncAccount;
-(BOOL)isLDAPAccount;
-(BOOL)isCalDAVAccount;
-(BOOL)isCardDAVAccount;
-(BOOL)isCalDAVChildAccount;
@end

@interface DAAccount (AuthenticationExtensions) <AccountFullAccountProtocol>
-(id)localizedIdenticalAccountFailureMessage;
-(id)localizedInvalidPasswordMessage;
-(void)renewAccountCredentialsWithHandler:(id)handler;
-(void)_handlePasswordNotification:(CFUserNotificationRef)notification response:(unsigned long)response callback:(id)callback;
@end

@interface DAAccount (TrustHandling)
-(int)_actionForTrust:(SecTrust*)trust host:(id)host service:(id)service;
-(void)handleTrust:(SecTrust*)trust forHost:(id)host withCompletionBlock:(id)completionBlock;
-(BOOL)handleTrustChallenge:(id)challenge;
-(BOOL)shouldAllowTrust:(SecTrust*)trust forHost:(id)host;
-(id)description;
@end

@interface DAAccount (EventsSupport)
-(id)defaultEventsFolder;
-(id)eventsFolders;
-(void)synchronizeEventsFolder:(id)folder previousTag:(id)tag actions:(id)actions highestIdContext:(XXStruct_SMhV9B*)context isInitialUberSync:(BOOL)sync isResyncAfterConnectionFailed:(BOOL)failed consumer:(id)consumer;
-(BOOL)sendEmailsForCalEvents:(id)calEvents consumer:(id)consumer;
@end

@interface DAAccount (ContactsSupport)
-(id)defaultContactsFolder;
-(id)contactsFolders;
-(void)synchronizeContactsFolder:(id)folder previousTag:(id)tag previousSyncToken:(id)token actions:(id)actions highestIdContext:(XXStruct_K5nmsA*)context isInitialUberSync:(BOOL)sync isResyncAfterConnectionFailed:(BOOL)failed consumer:(id)consumer;
@end

@interface DAAccount (InvitationSupport)
-(BOOL)reattemptInvitationLinkageForMetaData:(id)metaData inFolderWithId:(id)anId;
@end

@interface DAAccount (MailFolderSupport)
-(id)inboxFolder;
-(id)sentItemsFolder;
-(id)deletedItemsFolder;
@end

@interface DAAccount (Searching)
-(void)performSearchQuery:(id)query consumer:(id)consumer;
-(void)cancelSearchQuery:(id)query;
-(void)cancelAllSearchQueries;
-(BOOL)searchQueriesRunning;
-(int)supportsMailboxSearch;
@end

@interface DAAccount (NotesSupport)
-(id)defaultNotesFolder;
-(id)notesFolders;
-(void)synchronizeNotesFolder:(id)folder noteContext:(id)context previousTag:(id)tag actions:(id)actions changeSet:(id)set notesToDeleteAfterSync:(id)deleteAfterSync isInitialUberSync:(BOOL)sync isResyncAfterConnectionFailed:(BOOL)failed consumer:(id)consumer;
@end

@interface DAAccount (BookmarksSupport)
-(void)getRootFolderWithConsumer:(id)consumer;
-(void)synchronizeBookmarkTreeWithConsumer:(id)consumer hasRemoteChanges:(BOOL)changes;
@end

