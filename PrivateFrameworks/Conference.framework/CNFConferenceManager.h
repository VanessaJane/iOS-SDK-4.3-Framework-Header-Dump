/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/Conference.framework/Conference
 */

#import "Conference-Structs.h"
#import <XXUnknownSuperclass.h> // Unknown library
#import "CNFAudioDeviceControllerProtocol.h"
#import "CNFSoundPlayerDelegateProtocol.h"
#import "CNFDisplayControllerDelegate.h"
#import "UIApplicationDelegate.h"

@class CNFAudioPlayer, NSObject, CNFDisplayController, NSURL, CNFAudioDeviceController, AVController;
@protocol CNFConferenceManagerDelegate;

@interface CNFConferenceManager : XXUnknownSuperclass <UIApplicationDelegate, CNFDisplayControllerDelegate, CNFSoundPlayerDelegateProtocol, CNFAudioDeviceControllerProtocol> {
@private
	NSObject<CNFConferenceManagerDelegate>* _delegate;
	AVController* _avController;
	CNFDisplayController* _displayController;
	CNFAudioDeviceController* _deviceController;
	BOOL _isOutgoingInvitation;
	BOOL _initialMuteState;
	BOOL _audioWasInterrupted;
	NSURL* _originationURL;
	CNFAudioPlayer* _player;
}
@property(readonly, retain, nonatomic) CNFDisplayController* displayController;
@property(readonly, retain, nonatomic) CNFAudioDeviceController* deviceController;
@property(assign, nonatomic) NSObject<CNFConferenceManagerDelegate>* delegate;
@property(assign, nonatomic) BOOL isOutgoingInvitation;
@property(assign, nonatomic) BOOL initialMuteState;
@property(retain, nonatomic) NSURL* originationURL;
-(void)_fakeConferenceFirstLocalFrameNotification;
-(void)_fakeConferenceFirstRemoteFrameNotification;
-(void)_fakeConferenceConnectedNotification;
-(void)_fakeDeclinedNotification;
-(void)_fakeFailureNotification;
-(void)_fakeHangUp;
-(void)_ensureDisplayControllerExists;
-(void)_setupAudioPlayer;
-(void)_setupDeviceController;
-(void)_muteConference:(BOOL)conference;
-(void)_setUpConferenceManager;
-(void)_tearDownConferenceManager;
-(id)initWithDelegate:(id)delegate;
-(id)initWithDelegate:(id)delegate displayController:(id)controller;
-(void)dealloc;
-(void)showCallBarsAnimated:(BOOL)animated;
-(void)showAcceptCallBarsAnimated:(BOOL)animated wasLocked:(BOOL)locked;
-(BOOL)isInPhoneCall;
-(void)_beginAudioInterruption;
-(void)_endAudioInterruption;
-(void)_handlePresentConference:(id)conference;
-(void)_gracefullyTerminateAndReturnToLastApp;
-(void)_handleInvitationSent:(id)sent;
-(void)_handleFirstRemoteFrame:(id)frame;
-(void)_handleDismissConference:(id)conference;
-(void)_handleAccountNotRegistered:(id)registered;
-(void)_handleConferenceRemotePauseChanged:(id)changed;
-(void)_handleConferenceDidStart;
-(void)conferenceDisplayController:(id)controller endCallWithReason:(unsigned)reason;
-(void)conferenceDisplayController:(id)controller retryVideoConferenceInvitationWithReason:(unsigned)reason;
-(void)conferenceDisplayController:(id)controller cancelCallFailureRecoveryWithReason:(unsigned)reason;
-(void)conferenceDisplayController:(id)controller didFinishAnimatingCallEndWithReason:(unsigned)reason;
-(void)conferenceDisplayController:(id)controller endWithReason:(unsigned)reason;
-(void)conferenceDisplayController:(id)controller muteConferenceWithReason:(unsigned)reason;
-(void)conferenceDisplayController:(id)controller cameraToggleWithReason:(unsigned)reason;
-(BOOL)auxiliaryAudioRoutesAvailable;
-(void)conferenceDisplayControllerEndedWhileSuspending:(id)suspending;
-(void)_delayedPlayOutgoingRingSound;
-(void)_playOutgoingRingSound;
-(void)_stopSounds;
-(void)startConferenceWithURL:(id)url;
-(void)hangUpConferenceOnScreenLock;
-(void)audioDeviceControllerAudioRoutesChanged:(id)changed;
-(void)audioDeviceView:(id)view eventOccurred:(id)occurred;
-(void)audioDeviceView:(id)view selectedItem:(int)item;
-(int)audioDeviceViewNumberOfDevices:(id)devices;
-(id)audioDeviceView:(id)view deviceAtIndex:(int)index isActive:(BOOL*)active;
-(BOOL)shouldDisplayMuteOption;
-(BOOL)muteButtonEnabled;
-(BOOL)audioIsMuted;
-(void)audioDeviceView:(id)view selectedMute:(int)mute;
-(void)audioPlayerDidStopPlaying:(id)audioPlayer;
@end

