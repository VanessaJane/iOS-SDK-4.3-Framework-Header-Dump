/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/CoreDAV.framework/CoreDAV
 */

#import <XXUnknownSuperclass.h> // Unknown library
#import "CoreDAV-Structs.h"

@class CoreDAVRequestLogger, NSError, NSDictionary, NSHTTPURLResponse, NSURLConnection, NSURLRequest, NSDate, NSURL;
@protocol CoreDAVTaskManager, CoreDAVTaskDelegate, CoreDAVAccountInfoProvider, CoreDAVResponseBodyParser;

@interface CoreDAVTask : XXUnknownSuperclass {
	id<CoreDAVTaskManager> _taskManager;
	id<CoreDAVAccountInfoProvider> _accountInfoProvider;
	int _numDownloadedElements;
	int _depth;
@private
	NSHTTPURLResponse* _response;
	NSURLConnection* _connection;
	NSURLRequest* _request;
	double _timeoutInterval;
	int _responseStatusCode;
	NSDate* _dateConnectionWentOut;
	BOOL _didSendRequest;
	BOOL _didFailWithError;
	BOOL _didCancel;
	BOOL _didReceiveResponse;
	BOOL _didReceiveData;
	BOOL _didFinishLoading;
	BOOL _finished;
	void* _context;
	BOOL _receivedBadPasswordResponse;
	NSError* _passwordNotificationError;
	id<CoreDAVResponseBodyParser> _responseBodyParser;
	CoreDAVRequestLogger* _logger;
	NSURL* _url;
	id<CoreDAVTaskDelegate> _delegate;
	id _requestProgressBlock;
	id _responseProgressBlock;
	id _completionBlock;
	NSError* _error;
	unsigned _totalBytesReceived;
}
@property(assign, nonatomic) id<CoreDAVTaskManager> taskManager;
@property(assign, nonatomic) id<CoreDAVAccountInfoProvider> accountInfoProvider;
@property(assign, nonatomic) id<CoreDAVTaskDelegate> delegate;
@property(assign, nonatomic) void* context;
@property(readonly, retain) NSURL* url;
@property(assign) int depth;
@property(assign) double timeoutInterval;
@property(retain) id<CoreDAVResponseBodyParser> responseBodyParser;
@property(assign, nonatomic) int responseStatusCode;
@property(copy, nonatomic) id requestProgressBlock;
@property(copy, nonatomic) id responseProgressBlock;
@property(copy, nonatomic) id completionBlock;
@property(retain, nonatomic) NSError* error;
@property(assign, nonatomic) unsigned totalBytesReceived;
@property(readonly, retain) NSDictionary* responseHeaders;
+(unsigned)uniqueQueryID;
-(id)initWithURL:(id)url;
-(void)dealloc;
-(id)description;
-(id)httpMethod;
-(BOOL)_includeGeneralHeaders;
-(id)requestBodyStream;
-(id)requestBody;
-(id)copyDefaultParserForContentType:(id)contentType;
-(void)loadRequest:(id)request;
-(void)tearDownResources;
-(id)_createBodyData;
-(void)_failImmediately;
-(id)additionalHeaderValues;
-(void)performCoreDAVTask;
-(BOOL)validate:(id*)validate;
-(void)finishCoreDAVTaskWithError:(id)error;
-(id)_applyAuthenticationChain:(CFArrayRef)chain toRequest:(id)request;
-(void)_handleBadPasswordResponse;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveData:(id)data;
-(id)connection:(id)connection needNewBodyStream:(id)stream;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(BOOL)connectionShouldUseCredentialStorage:(id)connection;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)startModal;
-(void)reset;
-(int)numDownloadedElements;
-(void)reportStatusWithError:(id)error;
@end

