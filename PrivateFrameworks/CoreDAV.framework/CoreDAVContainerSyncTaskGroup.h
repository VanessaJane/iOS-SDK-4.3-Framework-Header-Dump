/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/CoreDAV.framework/CoreDAV
 */

#import "CoreDAVGetTaskDelegate.h"
#import "CoreDAVPutTaskDelegate.h"
#import "CoreDAVContainerMultiGetTaskDelegate.h"
#import "CoreDAVDeleteTaskDelegate.h"
#import "CoreDAVTaskGroup.h"

@class NSMutableSet, NSArray, NSMutableArray, NSMutableDictionary, NSString, NSURL;
@protocol CoreDAVLocalDBInfoProvider;

@interface CoreDAVContainerSyncTaskGroup : CoreDAVTaskGroup <CoreDAVContainerMultiGetTaskDelegate, CoreDAVDeleteTaskDelegate, CoreDAVPutTaskDelegate, CoreDAVGetTaskDelegate> {
	int _phase;
	NSURL* _folderURL;
	NSString* _previousCTag;
	NSString* _nextCTag;
	BOOL _useSyncCollection;
	NSString* _previousSyncToken;
	NSString* _nextSyncToken;
	NSArray* _actions;
	void* _context;
	unsigned _multiGetBatchSize;
	NSMutableArray* _unsubmittedTasks;
	unsigned _maxIndependentTasks;
	NSURL* _addMemberURL;
	BOOL _useMultiGet;
	NSMutableSet* _syncReportDeletedURLs;
	NSMutableDictionary* _urlToETag;
	Class _appSpecificDataItemClass;
	BOOL _syncItemOrder;
	NSMutableArray* _localItemURLOrder;
}
@property(retain) NSURL* addMemberURL;
@property(assign) unsigned multiGetBatchSize;
@property(assign) unsigned maxIndependentTasks;
@property(assign) BOOL useMultiGet;
@property(readonly, assign) NSURL* folderURL;
@property(readonly, assign) NSString* previousCTag;
@property(retain) NSString* previousSyncToken;
@property(assign) BOOL useSyncCollection;
@property(readonly, assign) void* context;
@property(readonly, assign) NSArray* localItemURLOrder;
@property(assign, nonatomic) id<CoreDAVLocalDBInfoProvider> delegate;
-(id)initWithFolderURL:(id)folderURL previousCTag:(id)tag previousSyncToken:(id)token actions:(id)actions syncItemOrder:(BOOL)order context:(void*)context accountInfoProvider:(id)provider taskManager:(id)manager;
-(id)initWithFolderURL:(id)folderURL previousCTag:(id)tag previousSyncToken:(id)token actions:(id)actions context:(void*)context accountInfoProvider:(id)provider taskManager:(id)manager;
-(void)dealloc;
-(id)description;
-(id)copyGetTaskWithURL:(id)url;
-(id)copyMultiGetTaskWithURLs:(id)urls;
-(id)dataContentType;
-(id)copyAdditionalResourcePropertiesToFetch;
-(BOOL)shouldFetchResourceWithEtag:(id)etag propertiesToValues:(id)values;
-(void)taskGroupWillCancelWithError:(id)taskGroup;
-(void)_tearDownAllUnsubmittedTasks;
-(void)bailWithError:(id)error;
-(void)cancelTaskGroup;
-(void)cancelTasks;
-(unsigned)_submitTasks;
-(void)_pushActions;
-(void)_getCTag;
-(void)_getETags;
-(void)_getOrder;
-(void)_getDataPayloads;
-(void)startTaskGroup;
-(void)syncAway;
-(void)putTask:(id)task completedWithNewETag:(id)newETag error:(id)error;
-(void)_postTask:(id)task didFinishWithError:(id)error;
-(void)_syncReportTask:(id)task didFinishWithError:(id)error;
-(void)task:(id)task didFinishWithError:(id)error;
-(void)deleteTask:(id)task completedWithError:(id)error;
-(void)propFindTask:(id)task parsedResponses:(id)responses error:(id)error;
-(void)containerMultiGetTask:(id)task parsedContents:(id)contents error:(id)error;
-(void)getTask:(id)task data:(id)data error:(id)error;
-(void)_getTask:(id)task finishedWithParsedContents:(id)parsedContents error:(id)error;
@end

