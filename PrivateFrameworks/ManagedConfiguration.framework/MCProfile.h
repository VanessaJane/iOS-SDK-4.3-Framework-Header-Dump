/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration
 */

#import "ManagedConfiguration-Structs.h"
#import "MCProfile.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSString, NSData, NSDate, NSArray, NSMutableArray;

@interface MCProfile : XXUnknownSuperclass {
@private
	NSString* _displayName;
	NSString* _profileDescription;
	NSString* _identifier;
	NSString* _UUID;
	NSString* _organization;
	int _version;
	NSDate* _installDate;
	NSDate* _expiryDate;
	BOOL _encrypted;
	BOOL _isLocked;
	NSString* _removalPasscode;
	BOOL _needsReboot;
	BOOL _isStub;
	NSString* _productBuildVersion;
	NSString* _productVersion;
	NSData* _profileData;
	int _trustLevel;
	BOOL _trustHasBeenEvaluated;
	dispatch_queue_s* _trustEvaluationQueue;
	NSString* _signerSummary;
	NSMutableArray* _signerCertificates;
	BOOL _signerHasBeenEvaluated;
	dispatch_queue_s* _signerEvaluationQueue;
}
@property(readonly, assign) NSString* profileDescription;
@property(retain) NSString* displayName;
@property(readonly, assign) NSString* identifier;
@property(readonly, assign) NSString* UUID;
@property(assign, getter=isEncrypted) BOOL encrypted;
@property(readonly, assign) NSString* organization;
@property(readonly, assign) int version;
@property(retain) NSDate* installDate;
@property(readonly, assign) NSDate* expiryDate;
@property(assign, getter=isLocked) BOOL locked;
@property(readonly, assign) NSString* removalPasscode;
@property(readonly, assign) BOOL needsReboot;
@property(readonly, assign) BOOL isStub;
@property(readonly, assign) NSString* productVersion;
@property(readonly, assign) NSString* productBuildVersion;
@property(retain) NSData* profileData;
@property(readonly, assign) NSArray* installationWarnings;
@property(readonly, assign) BOOL isManagedByProfileService;
@property(readonly, assign) NSDate* earliestCertificateExpiryDate;
@property(readonly, assign) NSArray* localizedPayloadSummaryByType;
@property(readonly, assign) NSArray* payloads;
@property(retain) NSArray* signerCertificates;
@property(readonly, assign) SecCertificate* signerCertificate;
@property(retain) NSString* signerSummary;
@property(readonly, assign) int trustLevel;
@property(readonly, assign) BOOL isSigned;
@property(readonly, assign) NSString* friendlyName;
+(id)profileWithData:(id)data outError:(id*)error;
+(id)profileWithData:(id)data fileName:(id)name outError:(id*)error;
+(int)_evaluateSignerTrust:(SecTrust*)trust;
+(int)_evaluateCertificateChain:(id)chain;
-(void)__evaluateSignerCertificates;
-(void)dealloc;
-(id)description;
-(void)evaluateSignerTrust;
-(void)evaluateSignerTrustAsynchronouslyWithCompletion:(id)completion;
@end

@interface MCProfile (Private)
@property(retain) NSString* removalPasscode;
@property(readonly, assign) NSString* UUIDHashFileName;
@property(readonly, assign) NSString* profileIDHashFileName;
@property(readonly, assign) NSString* stubFileName;
+(id)_malformedProfileError;
+(id)badFieldTypeErrorWithField:(id)field;
+(id)profileWithData:(id)data fileName:(id)name allowEmptyPayload:(BOOL)payload outError:(id*)error;
+(id)profileDictionaryFromProfileData:(id)profileData outWasEncrypted:(BOOL*)encrypted outError:(id*)error;
+(id)profileWithDictionary:(id)dictionary fileName:(id)name originalData:(id)data wasEncrypted:(BOOL)encrypted allowEmptyPayload:(BOOL)payload outError:(id*)error;
+(id)removeRequiredObjectInDictionary:(id)dictionary key:(id)key type:(Class)type errorDomain:(id)domain missingDataCode:(int)code missingDataErrorString:(id)string invalidDataCode:(int)code7 invalidDataErrorString:(id)string8 outError:(id*)error;
+(id)removeOptionalObjectInDictionary:(id)dictionary key:(id)key type:(Class)type errorDomain:(id)domain invalidDataCode:(int)code invalidDataErrorString:(id)string outError:(id*)error;
+(id)removeRequiredNonZeroLengthStringInDictionary:(id)dictionary key:(id)key errorDomain:(id)domain missingDataCode:(int)code missingDataErrorString:(id)string invalidDataCode:(int)code6 invalidDataErrorString:(id)string7 outError:(id*)error;
+(id)removeOptionalNonZeroLengthStringInDictionary:(id)dictionary key:(id)key errorDomain:(id)domain invalidDataCode:(int)code invalidDataErrorString:(id)string outError:(id*)error;
+(BOOL)checkString:(id)string isOneOfStrings:(id)strings key:(id)key errorDomain:(id)domain errorCode:(int)code errorString:(id)string6 outError:(id*)error;
+(int)evaluateTrustOfData:(id)data;
+(id)signerSummaryOfData:(id)data outSignerCertificates:(id*)certificates;
-(id)initWithDictionary:(id)dictionary originalData:(id)data wasEncrypted:(BOOL)encrypted allowEmptyPayload:(BOOL)payload outError:(id*)error;
-(id)malformedProfileErrorWithError:(id)error;
-(BOOL)writeStubToDirectory:(id)directory;
-(BOOL)writeStubToPath:(id)path;
-(id)stubDictionary;
@end

