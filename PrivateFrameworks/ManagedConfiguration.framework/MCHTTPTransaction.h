/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration
 */

#import "ManagedConfiguration-Structs.h"
#import <XXUnknownSuperclass.h> // Unknown library

@class NSMutableData, NSError, NSURLConnection, NSString, NSData, NSURL;

@interface MCHTTPTransaction : XXUnknownSuperclass {
@private
	NSURL* _requestURL;
	NSString* _method;
	double _timeout;
	NSString* _userAgent;
	NSString* _contentType;
	NSData* _data;
	SecIdentity* _identity;
	NSString* _CMSSignatureHeaderName;
	NSURL* _currentURL;
	NSURL* _permanentlyRedirectedURL;
	BOOL _rememberData;
	NSMutableData* _responseData;
	int _statusCode;
	NSError* _error;
	NSURLConnection* _connection;
	dispatch_semaphore_s* _doneSema;
}
@property(retain) NSURL* url;
@property(retain) NSString* method;
@property(assign) double timeout;
@property(retain) NSString* userAgent;
@property(retain) NSString* contentType;
@property(retain) NSData* data;
@property(readonly, assign) NSData* responseData;
@property(retain) NSString* CMSSignatureHeaderName;
@property(readonly, assign) NSError* error;
@property(readonly, assign) NSURL* permanentlyRedirectedURL;
@property(readonly, assign) int statusCode;
+(id)transactionWithURL:(id)url method:(id)method;
+(id)performRequestURL:(id)url method:(id)method timeout:(double)timeout userAgent:(id)agent contentType:(id)type data:(id)data identity:(SecIdentity*)identity outPermanentlyRedirectedURL:(id*)url8 outError:(id*)error;
-(SecIdentity*)copyIdentity;
-(void)setIdentity:(SecIdentity*)identity;
-(id)initWithURL:(id)url method:(id)method;
-(void)dealloc;
-(void)_beginTransaction;
-(void)performSynchronously;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(BOOL)connectionShouldUseCredentialStorage:(id)connection;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(BOOL)_shouldAllowTrust:(SecTrust*)trust forHost:(id)host;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
@end

